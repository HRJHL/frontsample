{"ast":null,"code":"export default {\n  name: 'AppHeader',\n  data() {\n    return {\n      isLoggedIn: false,\n      userName: ''\n    };\n  },\n  mounted() {\n    // 페이지가 로드될 때 sessionStorage에서 로그인 상태 확인\n    this.checkLoggedInStatus();\n  },\n  methods: {\n    // 로그인 상태 확인 및 동기화\n    checkLoggedInStatus() {\n      let loggedIn = sessionStorage.getItem('loggedIn');\n      if (loggedIn === 'true') {\n        this.isLoggedIn = true;\n        this.userName = sessionStorage.getItem('name') || ''; // 사용자 이름도 가져오기\n      } else {\n        this.isLoggedIn = false;\n        this.userName = '';\n      }\n    },\n    // 로그아웃 처리\n    logout() {\n      this.isLoggedIn = false;\n      this.userName = '';\n      sessionStorage.removeItem('loggedIn'); // loggedIn 키 제거\n      sessionStorage.removeItem('name'); // name 키 제거\n    },\n    // 로그인 처리\n    login() {\n      // 로그인 로직 처리 후\n      this.isLoggedIn = true;\n      this.userName = sessionStorage.getItem('name') || ''; // 사용자 이름도 가져오기\n      sessionStorage.setItem('loggedIn', true); // loggedIn 값을 true로 설정\n    }\n  },\n  watch: {\n    // isLoggedIn 값이 변경될 때마다 sessionStorage에 동기화\n    isLoggedIn(newValue) {\n      sessionStorage.setItem('loggedIn', newValue);\n      if (!newValue) {\n        sessionStorage.removeItem('name'); // 로그아웃 시 이름도 제거\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","isLoggedIn","userName","mounted","checkLoggedInStatus","methods","loggedIn","sessionStorage","getItem","logout","removeItem","login","setItem","watch","newValue"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/layout/AppHeader.vue"],"sourcesContent":["<template>\n  <div class=\"content\">\n    <header class=\"flex w-full absolute z-40 mt-[-5rem] border-b\" style=\"background-color:black; color:white\">\n      <nav class=\"navi w-full ml-[12.5%] gap-[18%] h-[81px]\">\n        <div class=\"flex items-center\">\n          <router-link to=\"/\">\n          <img src=\"@/assets/logo2.svg\" class=\"w-[142px] h-auto\"/>\n          </router-link>\n        </div>\n        <div class=\"flex w-full items-center\">\n        <div class=\"navbar flex-1 flex gap-[20%] md:gap-[20%] sm:gap-[20%]\">\n          <router-link v-if=\"isLoggedIn\" to=\"/message\" class=\"message text-[20px] sm:text-[14px] font-semibold\">메시지</router-link>\n          <button v-if=\"!isLoggedIn\" onclick=\"location.href='/login'\" class=\"text-[20px] sm:text-[14px] font-semibold\">메시지</button>\n          <router-link v-if=\"isLoggedIn\" to=\"/credit\" class=\"credit text-[20px] sm:text-[14px] font-semibold\">크레딧</router-link>\n          <button v-if=\"!isLoggedIn\" onclick=\"location.href='/login'\" class=\"text-[20px] sm:text-[14px] font-semibold\">크레딧</button>\n\n        </div>\n        <div class=\"flex-1 flex justify-end items-center gap-[10px] pr-[100px]\">\n          <div v-if=\"isLoggedIn\" class=\"text-[20px] sm:text-[14px] font-semibold\">{{ userName }}님</div>\n          <router-link v-if=\"!isLoggedIn\" to=\"/login\" class=\"text-[20px] sm:text-[14px] font-semibold\">로그인</router-link>\n          <router-link v-if=\"isLoggedIn\" to=\"/\" @click=\"logout\" class=\"text-[20px] sm:text-[14px] font-semibold\">로그아웃</router-link>\n        </div>\n        </div>\n      </nav>\n    </header>\n    <router-view :isLoggedIn=\"isLoggedIn\" @setIsLoggedIn=\"setIsLoggedIn\" class=\"mt-[5rem]\"/>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'AppHeader',\n  data() {\n    return {\n      isLoggedIn: false,\n      userName: '',\n    };\n  },\n  mounted() {\n    // 페이지가 로드될 때 sessionStorage에서 로그인 상태 확인\n    this.checkLoggedInStatus();\n  },\n  methods: {\n    // 로그인 상태 확인 및 동기화\n    checkLoggedInStatus() {\n      let loggedIn = sessionStorage.getItem('loggedIn');\n      if (loggedIn === 'true') {\n        this.isLoggedIn = true;\n        this.userName = sessionStorage.getItem('name') || ''; // 사용자 이름도 가져오기\n      } else {\n        this.isLoggedIn = false;\n        this.userName = '';\n      }\n    },\n    // 로그아웃 처리\n    logout() {\n      this.isLoggedIn = false;\n      this.userName = '';\n      sessionStorage.removeItem('loggedIn'); // loggedIn 키 제거\n      sessionStorage.removeItem('name'); // name 키 제거\n    },\n    // 로그인 처리\n    login() {\n      // 로그인 로직 처리 후\n      this.isLoggedIn = true;\n      this.userName = sessionStorage.getItem('name') || ''; // 사용자 이름도 가져오기\n      sessionStorage.setItem('loggedIn', true); // loggedIn 값을 true로 설정\n    }\n  },\n  watch: {\n    // isLoggedIn 값이 변경될 때마다 sessionStorage에 동기화\n    isLoggedIn(newValue) {\n      sessionStorage.setItem('loggedIn', newValue);\n      if (!newValue) {\n        sessionStorage.removeItem('name'); // 로그아웃 시 이름도 제거\n      }\n    }\n  }\n};\n\n</script>\n\n<style scoped>\n\n</style>\n\n"],"mappings":"AA6BA,eAAe;EACbA,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,KAAK;MACjBC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAC5B,CAAC;EACDC,OAAO,EAAE;IACP;IACAD,mBAAmBA,CAAA,EAAG;MACpB,IAAIE,QAAO,GAAIC,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;MACjD,IAAIF,QAAO,KAAM,MAAM,EAAE;QACvB,IAAI,CAACL,UAAS,GAAI,IAAI;QACtB,IAAI,CAACC,QAAO,GAAIK,cAAc,CAACC,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE;MACxD,OAAO;QACL,IAAI,CAACP,UAAS,GAAI,KAAK;QACvB,IAAI,CAACC,QAAO,GAAI,EAAE;MACpB;IACF,CAAC;IACD;IACAO,MAAMA,CAAA,EAAG;MACP,IAAI,CAACR,UAAS,GAAI,KAAK;MACvB,IAAI,CAACC,QAAO,GAAI,EAAE;MAClBK,cAAc,CAACG,UAAU,CAAC,UAAU,CAAC,EAAE;MACvCH,cAAc,CAACG,UAAU,CAAC,MAAM,CAAC,EAAE;IACrC,CAAC;IACD;IACAC,KAAKA,CAAA,EAAG;MACN;MACA,IAAI,CAACV,UAAS,GAAI,IAAI;MACtB,IAAI,CAACC,QAAO,GAAIK,cAAc,CAACC,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE;MACtDD,cAAc,CAACK,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE;IAC5C;EACF,CAAC;EACDC,KAAK,EAAE;IACL;IACAZ,UAAUA,CAACa,QAAQ,EAAE;MACnBP,cAAc,CAACK,OAAO,CAAC,UAAU,EAAEE,QAAQ,CAAC;MAC5C,IAAI,CAACA,QAAQ,EAAE;QACbP,cAAc,CAACG,UAAU,CAAC,MAAM,CAAC,EAAE;MACrC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}