{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: '',\n      name: ''\n    };\n  },\n  mounted() {\n    // Kakao initialization\n    if (!window.Kakao.isInitialized()) {\n      window.Kakao.init('8a670c965eb7e112ae1be878b9ce90b9'); // 카카오 JavaScript 키 입력\n    }\n    window.Kakao.Auth.createLoginButton({\n      container: '#kakao-login-button',\n      success: authObj => {\n        this.handleKakaoLoginSuccess(authObj);\n      },\n      fail: err => {\n        console.error(err);\n      }\n    });\n\n    // Google Sign-In initialization\n    this.initializeGoogleSignIn();\n  },\n  methods: {\n    login() {\n      axios.post('http://127.0.0.1:8000/login', {\n        identity: this.identity,\n        password: this.password,\n        name: this.name\n      }).then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n      }).catch(error => {\n        console.error(error);\n        alert(\"아이디 혹은 비밀번호가 틀렸습니다.\");\n      });\n    },\n    Sid() {\n      location.href = '/searchL';\n    },\n    Spw() {\n      location.href = '/searchP';\n    },\n    async handleKakaoLoginSuccess(authObj) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/auth/kakao', {\n          access_token: authObj.access_token\n        });\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n        console.log(response);\n      } catch (error) {\n        console.error('Kakao login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    },\n    async handleGoogleLoginSuccess(response) {\n      try {\n        const id_token = response.credential;\n        const res = await axios.post('http://127.0.0.1:8000/auth/google', {\n          id_token: id_token\n        });\n        const userName = res.data.user.name;\n        const useremail = res.data.user.email;\n        let userprofile = res.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n      } catch (error) {\n        console.error('Google login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    },\n    initializeGoogleSignIn() {\n      const script = document.createElement('script');\n      script.src = 'https://accounts.google.com/gsi/client';\n      script.async = true;\n      script.onload = () => {\n        window.google.accounts.id.initialize({\n          client_id: '741549460694-74df1r5va4oshv90chemn9u3p5r3mimv.apps.googleusercontent.com',\n          callback: this.handleGoogleLoginSuccess.bind(this) // 콜백 함수 참조를 정확히 설정합니다.\n        });\n        window.google.accounts.id.renderButton(document.getElementById('g_id_signin'), {\n          theme: 'outline',\n          size: 'large'\n        });\n      };\n      document.head.appendChild(script);\n    }\n  }\n};","map":{"version":3,"names":["axios","data","identity","password","name","mounted","window","Kakao","isInitialized","init","Auth","createLoginButton","container","success","authObj","handleKakaoLoginSuccess","fail","err","console","error","initializeGoogleSignIn","methods","login","post","then","response","userName","user","useremail","email","userprofile","profile_image","sessionStorage","setItem","location","href","catch","alert","Sid","Spw","access_token","log","handleGoogleLoginSuccess","id_token","credential","res","script","document","createElement","src","async","onload","google","accounts","id","initialize","client_id","callback","bind","renderButton","getElementById","theme","size","head","appendChild"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/user/LoginFrom.vue"],"sourcesContent":["<template>\n  <div class=\"w-full px-[30%] py-[10%]\" style=\"background-color:#FFFFF\">\n    <form @submit.prevent=\"login\">\n      <div class=\"flex w-full flex-col items-center justify-center\">\n        <!-- 배너 이미지 -->\n        <img src=\"@/assets/sendgo/logo.svg\" class=\"w-[300px] lg:w-[250px] md:w-[200px] sm:w-[150px] h-auto mb-[80px] lg:mb-[60px] md:mb-[50px] sm:mb-[40px]\">\n      </div>\n      <div class=\"flex flex-col mb-[20px] sm:mb-[10px] items-start gap-[20px] sm:gap-[10px]\">\n        <!-- 로그인 폼 -->\n        <input type=\"text\" v-model=\"identity\" placeholder=\"아이디\" class=\"text-[20px] sm:text-[14px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n        <input type=\"password\" v-model=\"password\" placeholder=\"비밀번호\" class=\"text-[20px] sm:text-[14px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n      </div>\n      <!-- 아이디 비번 찾기 -->\n      <div class=\"flex flex-row justify-end gap-[10px] mb-[20px]\">\n        <div @click=\"Sid()\" class=\"text-[15px]\">아이디 찾기</div>\n        <div class=\"text-[15px]\">|</div>\n        <div @click=\"Spw()\" class=\"text-[15px]\">비밀번호 찾기</div>\n      </div>\n      <div class=\"flex justify-center rounded-[8px] mb-[30px] sm:mb-[20px]\" style=\"background-color:#4F44F0;\">\n        <button type=\"submit\" class=\"font-semibold px-[20px] py-[15px] sm:text-[14px] sm:py-[10px]\" style=\"color:#FFFFFF\">로그인</button>\n      </div>\n      <div class=\"flex flex-row gap-[20px] justify-center rounded-[8px] mb-[30px] sm:mb-[20px]\">\n        <div id=\"kakao-login-button\" class=\"h-30px\"></div>\n        <div id=\"g_id_signin\" data-type=\"standard\" class=\"h-60px\"></div>\n      </div>\n      <div class=\"flex justify-center sm:text-[10px]\">\n        계정이 없으신가요?&nbsp;<router-link to=\"/register\" class=\"font-semibold border-b\" style=\"color:#4F44F0; border-color:#4F44F0;\">회원가입하기</router-link>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: '',\n      name: '',\n    };\n  },\n  mounted() {\n    // Kakao initialization\n    if (!window.Kakao.isInitialized()) {\n      window.Kakao.init('8a670c965eb7e112ae1be878b9ce90b9'); // 카카오 JavaScript 키 입력\n    }\n\n    window.Kakao.Auth.createLoginButton({\n      container: '#kakao-login-button',\n      success: (authObj) => {\n        this.handleKakaoLoginSuccess(authObj);\n      },\n      fail: (err) => {\n        console.error(err);\n      }\n    });\n\n    // Google Sign-In initialization\n    this.initializeGoogleSignIn();\n  },\n  methods: {\n    login() {\n      axios.post('http://127.0.0.1:8000/login', {\n        identity: this.identity,\n        password: this.password,\n        name: this.name,\n      })\n      .then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n      })\n      .catch(error => {\n        console.error(error);\n        alert(\"아이디 혹은 비밀번호가 틀렸습니다.\");\n      });\n    },\n    Sid() {\n      location.href='/searchL';\n    },\n    Spw() {\n      location.href='/searchP';\n    },\n    async handleKakaoLoginSuccess(authObj) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/auth/kakao', {\n          access_token: authObj.access_token\n        });\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n        console.log(response);\n      } catch (error) {\n        console.error('Kakao login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    },\n    async handleGoogleLoginSuccess(response) {\n      try {\n        const id_token = response.credential;\n        const res = await axios.post('http://127.0.0.1:8000/auth/google', {\n          id_token: id_token\n        });\n        const userName = res.data.user.name;\n        const useremail = res.data.user.email;\n        let userprofile = res.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n      } catch (error) {\n        console.error('Google login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    },\n    initializeGoogleSignIn() {\n      const script = document.createElement('script');\n      script.src = 'https://accounts.google.com/gsi/client';\n      script.async = true;\n      script.onload = () => {\n        window.google.accounts.id.initialize({\n          client_id: '741549460694-74df1r5va4oshv90chemn9u3p5r3mimv.apps.googleusercontent.com',\n          callback: this.handleGoogleLoginSuccess.bind(this) // 콜백 함수 참조를 정확히 설정합니다.\n        });\n        window.google.accounts.id.renderButton(\n          document.getElementById('g_id_signin'),\n          { theme: 'outline', size: 'large' }\n        );\n      };\n      document.head.appendChild(script);\n    },\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}