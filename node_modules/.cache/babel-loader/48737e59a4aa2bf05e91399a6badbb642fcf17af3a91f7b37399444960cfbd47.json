{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: '',\n      name: '',\n      googleClientId: 'YOUR_GOOGLE_CLIENT_ID' // Google Client ID 입력\n    };\n  },\n  mounted() {\n    // 카카오 SDK 초기화\n    if (!window.Kakao.isInitialized()) {\n      window.Kakao.init('8a670c965eb7e112ae1be878b9ce90b9'); // 카카오 JavaScript 키 입력\n    }\n\n    // 카카오 로그인 버튼 생성\n    window.Kakao.Auth.createLoginButton({\n      container: '#kakao-login-button',\n      success: authObj => {\n        this.handleKakaoLoginSuccess(authObj);\n      },\n      fail: err => {\n        console.error(err);\n      }\n    });\n\n    // Google API 초기화\n    window.gapi.load('auth2', () => {\n      window.gapi.auth2.init({\n        client_id: this.googleClientId,\n        scope: 'profile email'\n      }).then(() => {\n        this.renderGoogleButton();\n      }).catch(error => {\n        console.error('Google API initialization error:', error);\n      });\n    });\n  },\n  methods: {\n    login() {\n      axios.post('http://127.0.0.1:8000/login', {\n        identity: this.identity,\n        password: this.password,\n        name: this.name\n      }).then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a'; // 기본 프로필 이미지 설정\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n      }).catch(error => {\n        console.error(error);\n        alert(\"아이디 혹은 비밀번호가 틀렸습니다.\");\n      });\n    },\n    Sid() {\n      location.href = '/searchL';\n    },\n    Spw() {\n      location.href = '/searchP';\n    },\n    renderGoogleButton() {\n      window.gapi.signin2.render('google-signin-button', {\n        scope: 'profile email',\n        width: 240,\n        height: 50,\n        longtitle: true,\n        theme: 'dark',\n        onsuccess: this.handleGoogleLoginSuccess,\n        onfailure: this.handleGoogleLoginError\n      });\n    },\n    async handleGoogleLoginSuccess(googleUser) {\n      try {\n        const id_token = googleUser.getAuthResponse().id_token;\n        const response = await axios.post('http://127.0.0.1:8000/auth/google', {\n          id_token: id_token\n        });\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n      } catch (error) {\n        console.error('Google login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    },\n    handleGoogleLoginError(error) {\n      console.error('Google login error:', error);\n      alert(\"로그인에 실패했습니다.\");\n    },\n    async handleKakaoLoginSuccess(authObj) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/auth/kakao', {\n          access_token: authObj.access_token\n        });\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n        console.log(response);\n      } catch (error) {\n        console.error('Kakao login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","identity","password","name","googleClientId","mounted","window","Kakao","isInitialized","init","Auth","createLoginButton","container","success","authObj","handleKakaoLoginSuccess","fail","err","console","error","gapi","load","auth2","client_id","scope","then","renderGoogleButton","catch","methods","login","post","response","userName","user","useremail","email","userprofile","profile_image","sessionStorage","setItem","location","href","alert","Sid","Spw","signin2","render","width","height","longtitle","theme","onsuccess","handleGoogleLoginSuccess","onfailure","handleGoogleLoginError","googleUser","id_token","getAuthResponse","access_token","log"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/user/LoginFrom.vue"],"sourcesContent":["<template>\n  <div class=\"w-full px-[30%] py-[10%]\" style=\"background-color:#FFFFF\">\n    <form @submit.prevent=\"login\">\n      <div class=\"flex w-full flex-col items-center justify-center\">\n        <!-- 배너 이미지 -->\n        <img src=\"@/assets/sendgo/logo.svg\" class=\"w-[300px] lg:w-[250px] md:w-[200px] sm:w-[150px] h-auto mb-[80px] lg:mb-[60px] md:mb-[50px] sm:mb-[40px]\">\n      </div>\n      <div class=\"flex flex-col mb-[20px] sm:mb-[10px] items-start gap-[20px] sm:gap-[10px]\">\n        <!-- 로그인 폼 -->\n        <input type=\"text\" v-model=\"identity\" placeholder=\"아이디\" class=\"text-[20px] sm:text-[14px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n        <input type=\"password\" v-model=\"password\" placeholder=\"비밀번호\" class=\"text-[20px] sm:text-[14px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n      </div>\n      <!-- 아이디 비번 찾기 -->\n      <div class=\"flex flex-row justify-end gap-[10px] mb-[20px]\">\n        <div @click=\"Sid()\" class=\"text-[15px]\">아이디 찾기</div>\n        <div class=\"text-[15px]\">|</div>\n        <div @click=\"Spw()\" class=\"text-[15px]\">비밀번호 찾기</div>\n      </div>\n      <div class=\"flex justify-center rounded-[8px] mb-[30px] sm:mb-[20px]\" style=\"background-color:#4F44F0;\">\n        <button type=\"submit\" class=\"font-semibold px-[20px] py-[15px] sm:text-[14px] sm:py-[10px]\" style=\"color:#FFFFFF\">로그인</button>\n      </div>\n      <!-- 카카오 로그인 버튼 -->\n      <div class=\"flex justify-start rounded-[8px] mb-[30px] sm:mb-[20px]\">\n        <div id=\"kakao-login-button\"></div>\n      </div>\n      <!-- 구글 로그인 버튼 -->\n      <div class=\"flex justify-start rounded-[8px] mb-[30px] sm:mb-[20px]\">\n        <div id=\"google-signin-button\"></div>\n      </div>\n      <div class=\"flex justify-center sm:text-[10px]\">\n        계정이 없으신가요?&nbsp;<router-link to=\"/register\" class=\"font-semibold border-b\" style=\"color:#4F44F0; border-color:#4F44F0;\">회원가입하기</router-link>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: '',\n      name: '',\n      googleClientId: 'YOUR_GOOGLE_CLIENT_ID', // Google Client ID 입력\n    };\n  },\n  mounted() {\n    // 카카오 SDK 초기화\n    if (!window.Kakao.isInitialized()) {\n      window.Kakao.init('8a670c965eb7e112ae1be878b9ce90b9'); // 카카오 JavaScript 키 입력\n    }\n\n    // 카카오 로그인 버튼 생성\n    window.Kakao.Auth.createLoginButton({\n      container: '#kakao-login-button',\n      success: (authObj) => {\n        this.handleKakaoLoginSuccess(authObj);\n      },\n      fail: (err) => {\n        console.error(err);\n      }\n    });\n\n    // Google API 초기화\n    window.gapi.load('auth2', () => {\n      window.gapi.auth2.init({\n        client_id: this.googleClientId,\n        scope: 'profile email'\n      }).then(() => {\n        this.renderGoogleButton();\n      }).catch((error) => {\n        console.error('Google API initialization error:', error);\n      });\n    });\n  },\n  methods: {\n    login() {\n      axios.post('http://127.0.0.1:8000/login', {\n        identity: this.identity,\n        password: this.password,\n        name: this.name,\n      })\n      .then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a'; // 기본 프로필 이미지 설정\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n      })\n      .catch(error => {\n        console.error(error);\n        alert(\"아이디 혹은 비밀번호가 틀렸습니다.\");\n      });\n    },\n    Sid() {\n      location.href='/searchL';\n    },\n    Spw() {\n      location.href='/searchP';\n    },\n    renderGoogleButton() {\n      window.gapi.signin2.render('google-signin-button', {\n        scope: 'profile email',\n        width: 240,\n        height: 50,\n        longtitle: true,\n        theme: 'dark',\n        onsuccess: this.handleGoogleLoginSuccess,\n        onfailure: this.handleGoogleLoginError,\n      });\n    },\n    async handleGoogleLoginSuccess(googleUser) {\n      try {\n        const id_token = googleUser.getAuthResponse().id_token;\n\n        const response = await axios.post('http://127.0.0.1:8000/auth/google', {\n          id_token: id_token\n        });\n\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n      } catch (error) {\n        console.error('Google login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    },\n    handleGoogleLoginError(error) {\n      console.error('Google login error:', error);\n      alert(\"로그인에 실패했습니다.\");\n    },\n    async handleKakaoLoginSuccess(authObj) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/auth/kakao', {\n          access_token: authObj.access_token\n        });\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n        console.log(response);\n      } catch (error) {\n        console.error('Kakao login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 스타일 추가 */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}