{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'ChatContent',\n  data() {\n    return {\n      chats: [],\n      loading: true,\n      error: null,\n      email: '',\n      currentPage: 1,\n      itemsPerPage: 10,\n      inputValues: {} // 각 채팅의 답변을 저장할 객체\n    };\n  },\n  mounted() {\n    this.email = sessionStorage.getItem(\"email\");\n    this.fetchChats();\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.chats.length / this.itemsPerPage);\n    },\n    paginatedChats() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.chats.slice(start, end);\n    },\n    pageNumbers() {\n      const pages = [];\n      for (let i = 1; i <= this.totalPages; i++) {\n        pages.push(i);\n      }\n      return pages;\n    }\n  },\n  methods: {\n    async fetchChats() {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/chatM', {\n          email: this.email\n        });\n        this.chats = response.data.data;\n        this.loading = false;\n        this.initializeInputValues(); // 초기화\n      } catch (error) {\n        console.error('Server responded with error:', error.response?.data || error.message);\n        this.error = 'Failed to fetch chat information';\n        this.loading = false;\n      }\n    },\n    initializeInputValues() {\n      this.chats.forEach(chat => {\n        this.inputValues[chat.id] = '';\n      });\n    },\n    async submitResponse(chatId) {\n      const responseText = this.inputValues[chatId];\n      if (!responseText) {\n        alert('답변을 입력해주세요.');\n        return;\n      }\n      try {\n        await axios.post('http://127.0.0.1:8000/talk', {\n          messageId: chatId,\n          talk: responseText\n        });\n        this.fetchChats(); // 업데이트 후 채팅 재요청\n        console.log('Response submitted successfully.');\n      } catch (error) {\n        console.error('Failed to update chat:', error.response?.data || error.message);\n        this.error = 'Failed to submit response';\n      }\n    },\n    previousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage -= 1;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage += 1;\n      }\n    },\n    goToPage(page) {\n      this.currentPage = page;\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","chats","loading","error","email","currentPage","itemsPerPage","inputValues","mounted","sessionStorage","getItem","fetchChats","computed","totalPages","Math","ceil","length","paginatedChats","start","end","slice","pageNumbers","pages","i","push","methods","response","post","initializeInputValues","console","message","forEach","chat","id","submitResponse","chatId","responseText","alert","messageId","talk","log","previousPage","nextPage","goToPage","page"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/manege/ADM.vue"],"sourcesContent":["<template>\n  <div class=\"flex flex-col items-center justify-center px-[12.5%] pt-[109px] pb-[200px]\" style=\"background-color: #F2F4F8\">\n    <div class=\"mb-[50px] text-[45px] sm:text-[30px] font-bold\">문의사항</div>\n    <div v-if=\"loading\">Loading...</div>\n    <div v-else class=\"w-full\">\n      <div class=\"flex justify-end text-[16px]\">문의 수: {{ chats.length }}개</div>\n      <div v-if=\"chats.length\" class=\"w-full\">\n        <div class=\"flex flex-col w-full sm:text-[12px]\">\n          <div class=\"flex flex-row border-b font-bold p-2\" style=\"background-color:#E1E7FD\">\n            <div class=\"flex-1 text-center\">문의자</div>\n            <div class=\"flex-1 text-center\">문의내용</div>\n            <div class=\"flex-1 text-center\">답변</div>\n          </div>\n          <div v-for=\"chat in paginatedChats\" :key=\"chat.id\" class=\"flex flex-row items-center border-b p-2\" style=\"background-color:#FFFFFF\">\n            <div class=\"flex-1 text-center\">{{ chat.email }}</div>\n            <div class=\"flex-1 text-center\">{{ chat.message }}</div>\n            <div class=\"flex-1 flex flex-row text-center\">\n              <div v-if=\"chat.talk\" class=\"flex-1 text-center\">{{ chat.talk }}</div>\n              <div v-else class=\"flex gap-[10px]\">\n                <input \n                  type=\"text\" \n                  v-model=\"inputValues[chat.id]\" \n                  placeholder=\"답변을 입력해주세요\" \n                  class=\"flex-auto px-[10px] py-[5px] border\"\n                >\n                <button \n                  @click=\"submitResponse(chat.id)\" \n                  class=\"px-[20px] py-[10px] rounded-[8px]\" \n                  style=\"background-color:#4F44F0; color:#ffffff\"\n                >\n                  완료\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"flex justify-center items-center mt-4\">\n          <button @click=\"previousPage\" :disabled=\"currentPage === 1\">◀</button>\n          <div class=\"flex mx-4\">\n            <button \n              v-for=\"page in pageNumbers\" \n              :key=\"page\" \n              @click=\"goToPage(page)\"\n              :class=\"{'bg-blue-500 text-white': page === currentPage, 'bg-gray-200': page !== currentPage}\" \n              class=\"mx-1 px-3 py-1 rounded\"\n            >\n              {{ page }}\n            </button>\n          </div>\n          <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">▶</button>\n        </div>\n      </div>\n      <div v-else>\n        <p>구매내역이 없습니다.</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'ChatContent',\n  data() {\n    return {\n      chats: [],\n      loading: true,\n      error: null,\n      email: '',\n      currentPage: 1,\n      itemsPerPage: 10,\n      inputValues: {},  // 각 채팅의 답변을 저장할 객체\n    };\n  },\n  mounted() {\n    this.email = sessionStorage.getItem(\"email\");\n    this.fetchChats();\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.chats.length / this.itemsPerPage);\n    },\n    paginatedChats() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.chats.slice(start, end);\n    },\n    pageNumbers() {\n      const pages = [];\n      for (let i = 1; i <= this.totalPages; i++) {\n        pages.push(i);\n      }\n      return pages;\n    },\n  },\n  methods: {\n    async fetchChats() {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/chatM', {\n          email: this.email,\n        });\n        this.chats = response.data.data;\n        this.loading = false; \n        this.initializeInputValues();  // 초기화\n      } catch (error) {\n        console.error('Server responded with error:', error.response?.data || error.message);\n        this.error = 'Failed to fetch chat information'; \n        this.loading = false;\n      }\n    },\n    initializeInputValues() {\n      this.chats.forEach(chat => {\n        this.inputValues[chat.id] = ''; \n      });\n    },\n    async submitResponse(chatId) {\n      const responseText = this.inputValues[chatId];\n      if (!responseText) {\n        alert('답변을 입력해주세요.');\n        return;\n      }\n      \n      try {\n        await axios.post('http://127.0.0.1:8000/talk', {\n          messageId: chatId,\n          talk: responseText\n        });\n        this.fetchChats(); // 업데이트 후 채팅 재요청\n        console.log('Response submitted successfully.');\n      } catch (error) {\n        console.error('Failed to update chat:', error.response?.data || error.message);\n        this.error = 'Failed to submit response';\n      }\n    },\n    previousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage -= 1;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage += 1;\n      }\n    },\n    goToPage(page) {\n      this.currentPage = page;\n    },\n  }\n};\n</script>\n\n<style scoped>\n@media (max-width: 768px) {\n  .conbox {\n    margin-left: 0px;\n    width: 100%;\n    overflow-x: scroll;\n    white-space: nowrap;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}