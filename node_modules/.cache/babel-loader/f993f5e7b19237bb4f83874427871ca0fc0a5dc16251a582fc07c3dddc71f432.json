{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: '',\n      name: ''\n    };\n  },\n  mounted() {\n    if (!window.Kakao.isInitialized()) {\n      window.Kakao.init('8a670c965eb7e112ae1be878b9ce90b9'); // 카카오 JavaScript 키 입력\n    }\n    window.Kakao.Auth.createLoginButton({\n      container: '#kakao-login-button',\n      success: authObj => {\n        this.handleKakaoLoginSuccess(authObj);\n      },\n      fail: err => {\n        console.error(err);\n      }\n    });\n\n    // 구글 로그인 초기화 및 렌더링\n    this.loadGoogleApi().then(() => {\n      this.initGoogleLogin();\n    }).catch(error => {\n      console.error('Google API load error:', error);\n    });\n  },\n  methods: {\n    login() {\n      axios.post('http://127.0.0.1:8000/login', {\n        identity: this.identity,\n        password: this.password,\n        name: this.name\n      }).then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n      }).catch(error => {\n        console.error(error);\n        alert(\"아이디 혹은 비밀번호가 틀렸습니다.\");\n      });\n    },\n    Sid() {\n      location.href = '/searchL';\n    },\n    Spw() {\n      location.href = '/searchP';\n    },\n    async handleKakaoLoginSuccess(authObj) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/auth/kakao', {\n          access_token: authObj.access_token\n        });\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n        console.log(response);\n      } catch (error) {\n        console.error('Kakao login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    },\n    loadGoogleApi() {\n      return new Promise((resolve, reject) => {\n        if (window.gapi) {\n          resolve();\n        } else {\n          window.gapiLoaded = () => resolve();\n          window.gapiError = error => reject(error);\n          const script = document.createElement('script');\n          script.src = 'https://apis.google.com/js/platform.js';\n          script.async = true;\n          script.onload = () => {\n            if (window.gapi) {\n              resolve();\n            } else {\n              reject(new Error('Failed to load Google API'));\n            }\n          };\n          script.onerror = () => reject(new Error('Failed to load Google API script'));\n          document.head.appendChild(script);\n        }\n      });\n    },\n    initGoogleLogin() {\n      window.gapi.load('auth2', () => {\n        const auth2 = window.gapi.auth2.init({\n          client_id: '741549460694-2450692ecqr3jr3msq0tvvocrqgrb35f.apps.googleusercontent.com' // 구글 클라이언트 ID 입력\n        });\n        auth2.then(() => {\n          window.gapi.signin2.render('google-login-button', {\n            scope: 'profile email',\n            width: 240,\n            height: 50,\n            longtitle: true,\n            theme: 'dark',\n            onsuccess: googleUser => {\n              this.handleGoogleLoginSuccess(googleUser);\n            },\n            onfailure: error => {\n              console.error('Google login error:', error);\n            }\n          });\n        }).catch(error => {\n          console.error('Error initializing Google auth2:', error);\n        });\n      });\n    },\n    handleGoogleLoginSuccess(googleUser) {\n      const id_token = googleUser.getAuthResponse().id_token;\n      axios.post('http://127.0.0.1:8000/auth/google', {\n        id_token\n      }).then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n      }).catch(error => {\n        console.error('Google login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","identity","password","name","mounted","window","Kakao","isInitialized","init","Auth","createLoginButton","container","success","authObj","handleKakaoLoginSuccess","fail","err","console","error","loadGoogleApi","then","initGoogleLogin","catch","methods","login","post","response","userName","user","useremail","email","userprofile","profile_image","sessionStorage","setItem","location","href","alert","Sid","Spw","access_token","log","Promise","resolve","reject","gapi","gapiLoaded","gapiError","script","document","createElement","src","async","onload","Error","onerror","head","appendChild","load","auth2","client_id","signin2","render","scope","width","height","longtitle","theme","onsuccess","googleUser","handleGoogleLoginSuccess","onfailure","id_token","getAuthResponse"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/user/LoginFrom.vue"],"sourcesContent":["<template>\n  <div class=\"w-full px-[30%] py-[10%]\" style=\"background-color:#FFFFF\">\n    <form @submit.prevent=\"login\">\n      <div class=\"flex w-full flex-col items-center justify-center\">\n        <!-- 배너 이미지 -->\n        <img src=\"@/assets/sendgo/logo.svg\" class=\"w-[300px] lg:w-[250px] md:w-[200px] sm:w-[150px] h-auto mb-[80px] lg:mb-[60px] md:mb-[50px] sm:mb-[40px]\">\n      </div>\n      <div class=\"flex flex-col mb-[20px] sm:mb-[10px] items-start gap-[20px] sm:gap-[10px]\">\n        <!-- 로그인 폼 -->\n        <input type=\"text\" v-model=\"identity\" placeholder=\"아이디\" class=\"text-[20px] sm:text-[14px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n        <input type=\"password\" v-model=\"password\" placeholder=\"비밀번호\" class=\"text-[20px] sm:text-[14px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n      </div>\n      <!-- 아이디 비번 찾기 -->\n      <div class=\"flex flex-row justify-end gap-[10px] mb-[20px]\">\n        <div @click=\"Sid()\" class=\"text-[15px]\">아이디 찾기</div>\n        <div class=\"text-[15px]\">|</div>\n        <div @click=\"Spw()\" class=\"text-[15px]\">비밀번호 찾기</div>\n      </div>\n      <div class=\"flex justify-center rounded-[8px] mb-[30px] sm:mb-[20px]\" style=\"background-color:#4F44F0;\">\n        <button type=\"submit\" class=\"font-semibold px-[20px] py-[15px] sm:text-[14px] sm:py-[10px]\" style=\"color:#FFFFFF\">로그인</button>\n      </div>\n      <div class=\"flex justify-start rounded-[8px] mb-[30px] sm:mb-[20px]\">\n        <div id=\"kakao-login-button\"></div>\n      </div>\n      <div class=\"flex justify-start rounded-[8px] mb-[30px] sm:mb-[20px]\">\n        <div id=\"google-login-button\"></div>\n      </div>\n      <div class=\"flex justify-center sm:text-[10px]\">\n        계정이 없으신가요?&nbsp;<router-link to=\"/register\" class=\"font-semibold border-b\" style=\"color:#4F44F0; border-color:#4F44F0;\">회원가입하기</router-link>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: '',\n      name: '',\n    };\n  },\n  mounted() {\n    if (!window.Kakao.isInitialized()) {\n      window.Kakao.init('8a670c965eb7e112ae1be878b9ce90b9'); // 카카오 JavaScript 키 입력\n    }\n\n    window.Kakao.Auth.createLoginButton({\n      container: '#kakao-login-button',\n      success: (authObj) => {\n        this.handleKakaoLoginSuccess(authObj);\n      },\n      fail: (err) => {\n        console.error(err);\n      }\n    });\n\n    // 구글 로그인 초기화 및 렌더링\n    this.loadGoogleApi().then(() => {\n      this.initGoogleLogin();\n    }).catch(error => {\n      console.error('Google API load error:', error);\n    });\n  },\n  methods: {\n    login() {\n      axios.post('http://127.0.0.1:8000/login', {\n        identity: this.identity,\n        password: this.password,\n        name: this.name,\n      })\n      .then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n      })\n      .catch(error => {\n        console.error(error);\n        alert(\"아이디 혹은 비밀번호가 틀렸습니다.\");\n      });\n    },\n    Sid() {\n      location.href='/searchL';\n    },\n    Spw() {\n      location.href='/searchP';\n    },\n    async handleKakaoLoginSuccess(authObj) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/auth/kakao', {\n          access_token: authObj.access_token\n        });\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n        console.log(response);\n      } catch (error) {\n        console.error('Kakao login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    },\n    loadGoogleApi() {\n      return new Promise((resolve, reject) => {\n        if (window.gapi) {\n          resolve();\n        } else {\n          window.gapiLoaded = () => resolve();\n          window.gapiError = (error) => reject(error);\n          const script = document.createElement('script');\n          script.src = 'https://apis.google.com/js/platform.js';\n          script.async = true;\n          script.onload = () => {\n            if (window.gapi) {\n              resolve();\n            } else {\n              reject(new Error('Failed to load Google API'));\n            }\n          };\n          script.onerror = () => reject(new Error('Failed to load Google API script'));\n          document.head.appendChild(script);\n        }\n      });\n    },\n    initGoogleLogin() {\n      window.gapi.load('auth2', () => {\n        const auth2 = window.gapi.auth2.init({\n          client_id: '741549460694-2450692ecqr3jr3msq0tvvocrqgrb35f.apps.googleusercontent.com', // 구글 클라이언트 ID 입력\n        });\n\n        auth2.then(() => {\n          window.gapi.signin2.render('google-login-button', {\n            scope: 'profile email',\n            width: 240,\n            height: 50,\n            longtitle: true,\n            theme: 'dark',\n            onsuccess: (googleUser) => {\n              this.handleGoogleLoginSuccess(googleUser);\n            },\n            onfailure: (error) => {\n              console.error('Google login error:', error);\n            }\n          });\n        }).catch(error => {\n          console.error('Error initializing Google auth2:', error);\n        });\n      });\n    },\n    handleGoogleLoginSuccess(googleUser) {\n      const id_token = googleUser.getAuthResponse().id_token;\n\n      axios.post('http://127.0.0.1:8000/auth/google', {\n        id_token\n      })\n      .then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n      })\n      .catch(error => {\n        console.error('Google login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 스타일 추가 */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}