{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: '',\n      name: ''\n    };\n  },\n  mounted() {\n    // 카카오 로그인 버튼 초기화\n    if (!window.Kakao.isInitialized()) {\n      window.Kakao.init('8a670c965eb7e112ae1be878b9ce90b9'); // 카카오 JavaScript 키 입력\n    }\n    window.Kakao.Auth.createLoginButton({\n      container: '#kakao-login-button',\n      success: authObj => {\n        this.handleKakaoLoginSuccess(authObj);\n      },\n      fail: err => {\n        console.error(err);\n      }\n    });\n\n    // 구글 로그인 스크립트 추가\n    const script = document.createElement('script');\n    script.src = \"https://apis.google.com/js/platform.js\";\n    script.async = true;\n    script.defer = true;\n    script.onload = this.initializeGoogleSignIn;\n    document.head.appendChild(script);\n  },\n  methods: {\n    login() {\n      axios.post('http://127.0.0.1:8000/login', {\n        identity: this.identity,\n        password: this.password,\n        name: this.name\n      }).then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n      }).catch(error => {\n        console.error(error);\n        alert(\"아이디 혹은 비밀번호가 틀렸습니다.\");\n      });\n    },\n    Sid() {\n      location.href = '/searchL';\n    },\n    Spw() {\n      location.href = '/searchP';\n    },\n    async handleKakaoLoginSuccess(authObj) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/auth/kakao', {\n          access_token: authObj.access_token\n        });\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n        console.log(response);\n      } catch (error) {\n        console.error('Kakao login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    },\n    initializeGoogleSignIn() {\n      window.gapi.load('auth2', () => {\n        window.gapi.auth2.init({\n          client_id: 'YOUR_GOOGLE_CLIENT_ID' // 여기에 구글 클라이언트 ID를 입력하세요.\n        }).then(auth2 => {\n          const googleButton = document.createElement('div');\n          googleButton.id = 'google-login-button';\n          googleButton.classList.add('g-signin2');\n          document.getElementById('google-login-button').appendChild(googleButton);\n          auth2.attachClickHandler(googleButton, {}, googleUser => {\n            this.handleGoogleLoginSuccess(googleUser);\n          }, error => {\n            console.error('Google login error:', error);\n            alert(\"로그인에 실패했습니다.\");\n          });\n        });\n      });\n    },\n    handleGoogleLoginSuccess(googleUser) {\n      const id_token = googleUser.getAuthResponse().id_token;\n      axios.post('http://127.0.0.1:8000/auth/google', {\n        id_token\n      }).then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n        console.log(response);\n      }).catch(error => {\n        console.error('Google login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","identity","password","name","mounted","window","Kakao","isInitialized","init","Auth","createLoginButton","container","success","authObj","handleKakaoLoginSuccess","fail","err","console","error","script","document","createElement","src","async","defer","onload","initializeGoogleSignIn","head","appendChild","methods","login","post","then","response","userName","user","useremail","email","userprofile","profile_image","sessionStorage","setItem","location","href","catch","alert","Sid","Spw","access_token","log","gapi","load","auth2","client_id","googleButton","id","classList","add","getElementById","attachClickHandler","googleUser","handleGoogleLoginSuccess","id_token","getAuthResponse"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/user/LoginFrom.vue"],"sourcesContent":["<template>\n  <div class=\"w-full px-[30%] py-[10%]\" style=\"background-color:#FFFFF\">\n    <form @submit.prevent=\"login\">\n      <div class=\"flex w-full flex-col items-center justify-center\">\n        <!-- 배너 이미지 -->\n        <img src=\"@/assets/sendgo/logo.svg\" class=\"w-[300px] lg:w-[250px] md:w-[200px] sm:w-[150px] h-auto mb-[80px] lg:mb-[60px] md:mb-[50px] sm:mb-[40px]\">\n      </div>\n      <div class=\"flex flex-col mb-[20px] sm:mb-[10px] items-start gap-[20px] sm:gap-[10px]\">\n        <!-- 로그인 폼 -->\n        <input type=\"text\" v-model=\"identity\" placeholder=\"아이디\" class=\"text-[20px] sm:text-[14px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n        <input type=\"password\" v-model=\"password\" placeholder=\"비밀번호\" class=\"text-[20px] sm:text-[14px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n      </div>\n      <!-- 아이디 비번 찾기 -->\n      <div class=\"flex flex-row justify-end gap-[10px] mb-[20px]\">\n        <div @click=\"Sid()\" class=\"text-[15px]\">아이디 찾기</div>\n        <div class=\"text-[15px]\">|</div>\n        <div @click=\"Spw()\" class=\"text-[15px]\">비밀번호 찾기</div>\n      </div>\n      <div class=\"flex justify-center rounded-[8px] mb-[30px] sm:mb-[20px]\" style=\"background-color:#4F44F0;\">\n        <button type=\"submit\" class=\"font-semibold px-[20px] py-[15px] sm:text-[14px] sm:py-[10px]\" style=\"color:#FFFFFF\">로그인</button>\n      </div>\n      <div class=\"flex justify-center rounded-[8px] mb-[30px] sm:mb-[20px]\">\n        <div id=\"kakao-login-button\"></div>\n        <!-- 구글 로그인 버튼 -->\n        <div id=\"google-login-button\"></div>\n      </div>\n      <div class=\"flex justify-center sm:text-[10px]\">\n        계정이 없으신가요?&nbsp;<router-link to=\"/register\" class=\"font-semibold border-b\" style=\"color:#4F44F0; border-color:#4F44F0;\">회원가입하기</router-link>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: '',\n      name: '',\n    };\n  },\n  mounted() {\n    // 카카오 로그인 버튼 초기화\n    if (!window.Kakao.isInitialized()) {\n      window.Kakao.init('8a670c965eb7e112ae1be878b9ce90b9'); // 카카오 JavaScript 키 입력\n    }\n\n    window.Kakao.Auth.createLoginButton({\n      container: '#kakao-login-button',\n      success: (authObj) => {\n        this.handleKakaoLoginSuccess(authObj);\n      },\n      fail: (err) => {\n        console.error(err);\n      }\n    });\n\n    // 구글 로그인 스크립트 추가\n    const script = document.createElement('script');\n    script.src = \"https://apis.google.com/js/platform.js\";\n    script.async = true;\n    script.defer = true;\n    script.onload = this.initializeGoogleSignIn;\n    document.head.appendChild(script);\n  },\n  methods: {\n    login() {\n      axios.post('http://127.0.0.1:8000/login', {\n        identity: this.identity,\n        password: this.password,\n        name: this.name,\n      })\n      .then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n      })\n      .catch(error => {\n        console.error(error);\n        alert(\"아이디 혹은 비밀번호가 틀렸습니다.\");\n      });\n    },\n    Sid() {\n      location.href='/searchL';\n    },\n    Spw() {\n      location.href='/searchP';\n    },\n    async handleKakaoLoginSuccess(authObj) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/auth/kakao', {\n          access_token: authObj.access_token\n        });\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n        console.log(response);\n      } catch (error) {\n        console.error('Kakao login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    },\n    initializeGoogleSignIn() {\n      window.gapi.load('auth2', () => {\n        window.gapi.auth2.init({\n          client_id: 'YOUR_GOOGLE_CLIENT_ID' // 여기에 구글 클라이언트 ID를 입력하세요.\n        }).then(auth2 => {\n          const googleButton = document.createElement('div');\n          googleButton.id = 'google-login-button';\n          googleButton.classList.add('g-signin2');\n          document.getElementById('google-login-button').appendChild(googleButton);\n\n          auth2.attachClickHandler(googleButton, {},\n            (googleUser) => {\n              this.handleGoogleLoginSuccess(googleUser);\n            },\n            (error) => {\n              console.error('Google login error:', error);\n              alert(\"로그인에 실패했습니다.\");\n            }\n          );\n        });\n      });\n    },\n    handleGoogleLoginSuccess(googleUser) {\n      const id_token = googleUser.getAuthResponse().id_token;\n      axios.post('http://127.0.0.1:8000/auth/google', { id_token })\n        .then(response => {\n          const userName = response.data.user.name;\n          const useremail = response.data.user.email;\n          let userprofile = response.data.user.profile_image || 'a';\n          sessionStorage.setItem(\"logg\", true);\n          sessionStorage.setItem('name', userName);\n          sessionStorage.setItem('email', useremail);\n          sessionStorage.setItem('profile', userprofile);\n          window.location.href ='/message';\n          console.log(response);\n        })\n        .catch(error => {\n          console.error('Google login error:', error);\n          alert(\"로그인에 실패했습니다.\");\n        });\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 스타일 추가 */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}