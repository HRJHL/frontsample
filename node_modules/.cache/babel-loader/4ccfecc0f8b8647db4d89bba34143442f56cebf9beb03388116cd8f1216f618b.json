{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: '',\n      name: ''\n    };\n  },\n  mounted() {\n    // Initialize Google\n    gapi.load('auth2', () => {\n      const auth2 = gapi.auth2.init({\n        client_id: 'YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com',\n        cookiepolicy: 'single_host_origin'\n      });\n      auth2.attachClickHandler(document.getElementById('google-login-button'), {}, googleUser => {\n        const id_token = googleUser.getAuthResponse().id_token;\n        this.handleGoogleLoginSuccess(id_token);\n      }, error => {\n        console.error(error);\n        alert('Google 로그인에 실패했습니다.');\n      });\n    });\n  },\n  methods: {\n    login() {\n      axios.post('/login', {\n        identity: this.identity,\n        password: this.password,\n        name: this.name\n      }).then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n      }).catch(error => {\n        console.error(error);\n        alert(\"아이디 혹은 비밀번호가 틀렸습니다.\");\n      });\n    },\n    Sid() {\n      location.href = '/searchL';\n    },\n    Spw() {\n      location.href = '/searchP';\n    },\n    async handleGoogleLoginSuccess(id_token) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/api/auth/google', {\n          id_token\n        });\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n        console.log(response);\n      } catch (error) {\n        console.error('Google login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","identity","password","name","mounted","gapi","load","auth2","init","client_id","cookiepolicy","attachClickHandler","document","getElementById","googleUser","id_token","getAuthResponse","handleGoogleLoginSuccess","error","console","alert","methods","login","post","then","response","userName","user","useremail","email","userprofile","profile_image","sessionStorage","setItem","window","location","href","catch","Sid","Spw","log"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/user/LoginFrom.vue"],"sourcesContent":["<template>\n  <div class=\"w-full px-[30%] py-[10%]\" style=\"background-color:#FFFFF\">\n    <form @submit.prevent=\"login\">\n      <div class=\"flex w-full flex-col items-center justify-center\">\n        <!-- 배너 이미지 -->\n        <img src=\"@/assets/sendgo/logo.svg\" class=\"w-[300px] lg:w-[250px] md:w-[200px] sm:w-[150px] h-auto mb-[80px] lg:mb-[60px] md:mb-[50px] sm:mb-[40px]\">\n      </div>\n      <div class=\"flex flex-col mb-[20px] sm:mb-[10px] items-start gap-[20px] sm:gap-[10px]\">\n        <!-- 로그인 폼 -->\n        <input type=\"text\" v-model=\"identity\" placeholder=\"아이디\" class=\"text-[20px] sm:text-[14px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n        <input type=\"password\" v-model=\"password\" placeholder=\"비밀번호\" class=\"text-[20px] sm:text-[14px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n      </div>\n      <!-- 아이디 비번 찾기 -->\n      <div class=\"flex flex-row justify-end gap-[10px] mb-[20px]\">\n        <div @click=\"Sid()\" class=\"text-[15px]\">아이디 찾기</div>\n        <div class=\"text-[15px]\">|</div>\n        <div @click=\"Spw()\" class=\"text-[15px]\">비밀번호 찾기</div>\n      </div>\n      <div class=\"flex justify-center rounded-[8px] mb-[30px] sm:mb-[20px]\" style=\"background-color:#4F44F0;\">\n        <button type=\"submit\" class=\"font-semibold px-[20px] py-[15px] sm:text-[14px] sm:py-[10px]\" style=\"color:#FFFFFF\">로그인</button>\n      </div>\n      <div class=\"flex justify-center rounded-[8px] mb-[30px] sm:mb-[20px]\">\n        <div id=\"kakao-login-button\"></div>\n        <div id=\"google-login-button\"></div>\n      </div>\n      <div class=\"flex justify-center sm:text-[10px]\">\n        계정이 없으신가요?&nbsp;<router-link to=\"/register\" class=\"font-semibold border-b\" style=\"color:#4F44F0; border-color:#4F44F0;\">회원가입하기</router-link>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: '',\n      name: '',\n    };\n  },\n  mounted() {\n    // Initialize Google\n    gapi.load('auth2', () => {\n      const auth2 = gapi.auth2.init({\n        client_id: 'YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com',\n        cookiepolicy: 'single_host_origin',\n      });\n\n      auth2.attachClickHandler(document.getElementById('google-login-button'), {},\n        (googleUser) => {\n          const id_token = googleUser.getAuthResponse().id_token;\n          this.handleGoogleLoginSuccess(id_token);\n        }, (error) => {\n          console.error(error);\n          alert('Google 로그인에 실패했습니다.');\n        }\n      );\n    });\n  },\n  methods: {\n    login() {\n      axios.post('/login', {\n        identity: this.identity,\n        password: this.password,\n        name: this.name,\n      })\n      .then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n      })\n      .catch(error => {\n        console.error(error);\n        alert(\"아이디 혹은 비밀번호가 틀렸습니다.\");\n      });\n    },\n    Sid() {\n      location.href='/searchL';\n    },\n    Spw() {\n      location.href='/searchP';\n    },\n    async handleGoogleLoginSuccess(id_token) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/api/auth/google', {\n          id_token\n        });\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n        console.log(response);\n      } catch (error) {\n        console.error('Google login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    }\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}