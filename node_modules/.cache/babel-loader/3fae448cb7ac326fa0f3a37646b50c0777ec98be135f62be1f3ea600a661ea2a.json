{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from \"axios\";\nconst getKakaoToken = async code => {\n  try {\n    const data = {\n      grant_type: \"authorization_code\",\n      client_id: \"xxxxxxxxxxxx\",\n      // REST API 키\n      redirect_uri: \"http://localhost:8080/kakaologin\",\n      code: code\n    };\n    const queryString = Object.keys(data).map(k => encodeURIComponent(k) + \"=\" + encodeURIComponent(data[k])).join(\"&\");\n    //console.log(queryString);\n\n    const result = await axios.post(\"https://kauth.kakao.com/oauth/token\", queryString, {\n      headers: {\n        \"Content-type\": \"application/x-www-form-urlencoded;charset=utf-8\"\n      }\n    });\n    console.log(result);\n    return result;\n  } catch (e) {\n    console.log(e);\n    return e;\n  }\n};\nconst getKakaoUserInfo = async () => {\n  let data = \"\";\n  await window.Kakao.API.request({\n    url: \"/v2/user/me\"\n  }).then(function (response) {\n    console.log(response);\n    data = response;\n  }).catch(function (error) {\n    console.log(error);\n  });\n  console.log(\"카카오 계정 정보\", data);\n  return data;\n};\nexport default {\n  data() {\n    return {\n      user: {} // TODO store로 이관 필요\n    };\n  },\n  created() {\n    const urlParams = new URLSearchParams(window.location.search);\n    // code가 있는 경우 토큰 발급 요청\n    if (urlParams.has(\"code\")) {\n      const code = urlParams.get(\"code\");\n      console.log(\"code: \", code);\n      this.setKakaoToken(code);\n    }\n  },\n  methods: {\n    // 1. 인가 코드 얻기\n    // https://developers.kakao.com/docs/latest/ko/kakaologin/js#login\n    kakaoLogin() {\n      window.Kakao.Auth.authorize({\n        redirectUri: \"http://localhost:8080/kakaologin\"\n      });\n    },\n    // 2. 토큰 조회\n    // https://developers.kakao.com/docs/latest/ko/kakaologin/rest-api#request-token\n    async setKakaoToken(code) {\n      const {\n        data\n      } = await getKakaoToken(code);\n      if (data.error) {\n        console.log(data.error);\n        return;\n      }\n      console.log(data);\n      window.Kakao.Auth.setAccessToken(data.access_token);\n      await this.setUserInfo();\n      this.$router.push({\n        path: \"/kakaologin\"\n      });\n    },\n    // 3. 사용자 정보 조회\n    // https://developers.kakao.com/docs/latest/ko/kakaologin/js#req-user-info\n    async setUserInfo() {\n      const res = await getKakaoUserInfo();\n      const userInfo = {\n        name: res.kakao_account.profile.nickname,\n        email: res.kakao_account.email\n      };\n      console.log(userInfo);\n      this.user = userInfo;\n    },\n    // 로그아웃\n    kakaoLogout() {\n      this.user = {};\n      window.Kakao.Auth.logout().then(function (response) {\n        console.log(window.Kakao.Auth.getAccessToken()); // null\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","getKakaoToken","code","data","grant_type","client_id","redirect_uri","queryString","Object","keys","map","k","encodeURIComponent","join","result","post","headers","console","log","e","getKakaoUserInfo","window","Kakao","API","request","url","then","response","catch","error","user","created","urlParams","URLSearchParams","location","search","has","get","setKakaoToken","methods","kakaoLogin","Auth","authorize","redirectUri","setAccessToken","access_token","setUserInfo","$router","push","path","res","userInfo","name","kakao_account","profile","nickname","email","kakaoLogout","logout","getAccessToken"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/user/LoginFrom.vue"],"sourcesContent":["<template>\n  <div>\n    <a v-if=\"user.email == undefined\" @click=\"kakaoLogin()\">\n      <img\n        src=\"//k.kakaocdn.net/14/dn/btqCn0WEmI3/nijroPfbpCa4at5EIsjyf0/o.jpg\"\n        width=\"222\"\n      />\n    </a>\n    <div v-else>\n      <p>nickname: {{ user.name }}</p>\n      <p>email: {{ user.email }}</p>\n      <button type=\"button\" @click=\"kakaoLogout\">카카오 로그아웃</button>\n    </div>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\n\nconst getKakaoToken = async (code) => {\n  try {\n    const data = {\n      grant_type: \"authorization_code\",\n      client_id: \"xxxxxxxxxxxx\", // REST API 키\n      redirect_uri: \"http://localhost:8080/kakaologin\",\n      code: code,\n    };\n\n    const queryString = Object.keys(data)\n      .map((k) => encodeURIComponent(k) + \"=\" + encodeURIComponent(data[k]))\n      .join(\"&\");\n    //console.log(queryString);\n\n    const result = await axios.post(\n      \"https://kauth.kakao.com/oauth/token\",\n      queryString,\n      {\n        headers: {\n          \"Content-type\": \"application/x-www-form-urlencoded;charset=utf-8\",\n        },\n      }\n    );\n    console.log(result);\n    return result;\n  } catch (e) {\n    console.log(e);\n    return e;\n  }\n};\n\nconst getKakaoUserInfo = async () => {\n  let data = \"\";\n  await window.Kakao.API.request({\n    url: \"/v2/user/me\",\n  })\n    .then(function (response) {\n      console.log(response);\n      data = response;\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  console.log(\"카카오 계정 정보\", data);\n  return data;\n};\n\nexport default {\n  data() {\n    return {\n      user: {}, // TODO store로 이관 필요\n    };\n  },\n  created() {\n    const urlParams = new URLSearchParams(window.location.search);\n    // code가 있는 경우 토큰 발급 요청\n    if (urlParams.has(\"code\")) {\n      const code = urlParams.get(\"code\");\n      console.log(\"code: \", code);\n      this.setKakaoToken(code);\n    }\n  },\n  methods: {\n    // 1. 인가 코드 얻기\n    // https://developers.kakao.com/docs/latest/ko/kakaologin/js#login\n    kakaoLogin() {\n      window.Kakao.Auth.authorize({\n        redirectUri: \"http://localhost:8080/kakaologin\",\n      });\n    },\n\n    // 2. 토큰 조회\n    // https://developers.kakao.com/docs/latest/ko/kakaologin/rest-api#request-token\n    async setKakaoToken(code) {\n      const { data } = await getKakaoToken(code);\n      if (data.error) {\n        console.log(data.error);\n        return;\n      }\n      console.log(data);\n      window.Kakao.Auth.setAccessToken(data.access_token);\n      await this.setUserInfo();\n      this.$router.push({ path: \"/kakaologin\" });\n    },\n\n    // 3. 사용자 정보 조회\n    // https://developers.kakao.com/docs/latest/ko/kakaologin/js#req-user-info\n    async setUserInfo() {\n      const res = await getKakaoUserInfo();\n      const userInfo = {\n        name: res.kakao_account.profile.nickname,\n        email: res.kakao_account.email,\n      };\n      console.log(userInfo);\n      this.user = userInfo;\n    },\n\n    // 로그아웃\n    kakaoLogout() {\n      this.user = {};\n      window.Kakao.Auth.logout()\n        .then(function (response) {\n          console.log(window.Kakao.Auth.getAccessToken()); // null\n          console.log(response);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    },\n  },\n};\n</script>\n출처: https://happy-jjang-a.tistory.com/291 [jjang-a 블로그:티스토리]"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}