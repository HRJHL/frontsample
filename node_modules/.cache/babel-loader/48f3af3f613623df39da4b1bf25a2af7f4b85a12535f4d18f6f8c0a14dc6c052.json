{"ast":null,"code":"import PaymentWidget from '@tosspayments/payment-sdk';\nexport default {\n  data() {\n    return {\n      couponApplied: false,\n      amount: 50000,\n      widgetClientKey: \"test_gck_docs_Ovk5rk1EwkEbP0W43n07xlzm\",\n      customerKey: \"1rNzb3iHa8gPgRkLABTcJ\",\n      paymentWidget: null,\n      paymentMethodWidget: null\n    };\n  },\n  mounted() {\n    // Initialize PaymentWidget asynchronously if needed\n    this.initializePaymentWidget();\n  },\n  methods: {\n    async initializePaymentWidget() {\n      try {\n        this.paymentWidget = new PaymentWidget(this.widgetClientKey, this.customerKey);\n        await this.renderPaymentMethods();\n        await this.renderAgreement();\n      } catch (error) {\n        console.error('Error initializing PaymentWidget:', error);\n        // Handle initialization error\n      }\n    },\n    renderPaymentMethods() {\n      return this.paymentWidget.renderPaymentMethods(this.$refs.paymentMethod, {\n        value: this.amount\n      }, {\n        variantKey: \"DEFAULT\"\n      });\n    },\n    renderAgreement() {\n      return this.paymentWidget.renderAgreement(this.$refs.agreement, {\n        variantKey: \"AGREEMENT\"\n      });\n    },\n    applyCoupon() {\n      if (this.couponApplied) {\n        this.paymentMethodWidget.updateAmount(this.amount);\n      } else {\n        this.paymentMethodWidget.updateAmount(this.amount - 5000);\n      }\n      this.couponApplied = !this.couponApplied;\n    },\n    async processPayment() {\n      try {\n        // 예시로 주어진 값들은 실제 서버에서 처리할 수 있는 형태로 변경해야 합니다.\n        const paymentResponse = await this.paymentWidget.requestPayment({\n          orderId: \"zSpkmBCED-aslEKg0n72-\",\n          orderName: \"토스 티셔츠 외 2건\",\n          successUrl: window.location.origin + \"/success\",\n          failUrl: window.location.origin + \"/fail\",\n          customerEmail: \"customer123@gmail.com\",\n          customerName: \"김토스\",\n          customerMobilePhone: \"01012341234\"\n        });\n\n        // Handle payment response if needed\n        console.log('Payment response:', paymentResponse);\n      } catch (error) {\n        console.error('Error processing payment:', error);\n        // Handle payment error\n      }\n    }\n  }\n};","map":{"version":3,"names":["PaymentWidget","data","couponApplied","amount","widgetClientKey","customerKey","paymentWidget","paymentMethodWidget","mounted","initializePaymentWidget","methods","renderPaymentMethods","renderAgreement","error","console","$refs","paymentMethod","value","variantKey","agreement","applyCoupon","updateAmount","processPayment","paymentResponse","requestPayment","orderId","orderName","successUrl","window","location","origin","failUrl","customerEmail","customerName","customerMobilePhone","log"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/toss/TossCheck.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <input type=\"checkbox\" id=\"coupon-box\" @change=\"applyCoupon\" />\n      <label for=\"coupon-box\"> 5,000원 쿠폰 적용 </label>\n    </div>\n    <!-- 결제 UI, 이용약관 UI 영역 -->\n    <div ref=\"paymentMethod\"></div>\n    <div ref=\"agreement\"></div>\n    <!-- 결제하기 버튼 -->\n    <button @click=\"processPayment\">결제하기</button>\n  </div>\n</template>\n\n<script>\nimport PaymentWidget from '@tosspayments/payment-sdk';\n\nexport default {\n  data() {\n    return {\n      couponApplied: false,\n      amount: 50000,\n      widgetClientKey: \"test_gck_docs_Ovk5rk1EwkEbP0W43n07xlzm\",\n      customerKey: \"1rNzb3iHa8gPgRkLABTcJ\",\n      paymentWidget: null,\n      paymentMethodWidget: null\n    };\n  },\n  mounted() {\n    // Initialize PaymentWidget asynchronously if needed\n    this.initializePaymentWidget();\n  },\n  methods: {\n    async initializePaymentWidget() {\n      try {\n        this.paymentWidget = new PaymentWidget(this.widgetClientKey, this.customerKey);\n        await this.renderPaymentMethods();\n        await this.renderAgreement();\n      } catch (error) {\n        console.error('Error initializing PaymentWidget:', error);\n        // Handle initialization error\n      }\n    },\n    renderPaymentMethods() {\n      return this.paymentWidget.renderPaymentMethods(\n        this.$refs.paymentMethod,\n        { value: this.amount },\n        { variantKey: \"DEFAULT\" }\n      );\n    },\n    renderAgreement() {\n      return this.paymentWidget.renderAgreement(this.$refs.agreement, { variantKey: \"AGREEMENT\" });\n    },\n    applyCoupon() {\n      if (this.couponApplied) {\n        this.paymentMethodWidget.updateAmount(this.amount);\n      } else {\n        this.paymentMethodWidget.updateAmount(this.amount - 5000);\n      }\n      this.couponApplied = !this.couponApplied;\n    },\n    async processPayment() {\n      try {\n        // 예시로 주어진 값들은 실제 서버에서 처리할 수 있는 형태로 변경해야 합니다.\n        const paymentResponse = await this.paymentWidget.requestPayment({\n          orderId: \"zSpkmBCED-aslEKg0n72-\",\n          orderName: \"토스 티셔츠 외 2건\",\n          successUrl: window.location.origin + \"/success\",\n          failUrl: window.location.origin + \"/fail\",\n          customerEmail: \"customer123@gmail.com\",\n          customerName: \"김토스\",\n          customerMobilePhone: \"01012341234\"\n        });\n\n        // Handle payment response if needed\n        console.log('Payment response:', paymentResponse);\n      } catch (error) {\n        console.error('Error processing payment:', error);\n        // Handle payment error\n      }\n    }\n  }\n};\n</script>\n"],"mappings":"AAeA,OAAOA,aAAY,MAAO,2BAA2B;AAErD,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,KAAK;MACpBC,MAAM,EAAE,KAAK;MACbC,eAAe,EAAE,wCAAwC;MACzDC,WAAW,EAAE,uBAAuB;MACpCC,aAAa,EAAE,IAAI;MACnBC,mBAAmB,EAAE;IACvB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,uBAAuB,CAAC,CAAC;EAChC,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,uBAAuBA,CAAA,EAAG;MAC9B,IAAI;QACF,IAAI,CAACH,aAAY,GAAI,IAAIN,aAAa,CAAC,IAAI,CAACI,eAAe,EAAE,IAAI,CAACC,WAAW,CAAC;QAC9E,MAAM,IAAI,CAACM,oBAAoB,CAAC,CAAC;QACjC,MAAM,IAAI,CAACC,eAAe,CAAC,CAAC;MAC9B,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QACzD;MACF;IACF,CAAC;IACDF,oBAAoBA,CAAA,EAAG;MACrB,OAAO,IAAI,CAACL,aAAa,CAACK,oBAAoB,CAC5C,IAAI,CAACI,KAAK,CAACC,aAAa,EACxB;QAAEC,KAAK,EAAE,IAAI,CAACd;MAAO,CAAC,EACtB;QAAEe,UAAU,EAAE;MAAU,CAC1B,CAAC;IACH,CAAC;IACDN,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACN,aAAa,CAACM,eAAe,CAAC,IAAI,CAACG,KAAK,CAACI,SAAS,EAAE;QAAED,UAAU,EAAE;MAAY,CAAC,CAAC;IAC9F,CAAC;IACDE,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAAClB,aAAa,EAAE;QACtB,IAAI,CAACK,mBAAmB,CAACc,YAAY,CAAC,IAAI,CAAClB,MAAM,CAAC;MACpD,OAAO;QACL,IAAI,CAACI,mBAAmB,CAACc,YAAY,CAAC,IAAI,CAAClB,MAAK,GAAI,IAAI,CAAC;MAC3D;MACA,IAAI,CAACD,aAAY,GAAI,CAAC,IAAI,CAACA,aAAa;IAC1C,CAAC;IACD,MAAMoB,cAAcA,CAAA,EAAG;MACrB,IAAI;QACF;QACA,MAAMC,eAAc,GAAI,MAAM,IAAI,CAACjB,aAAa,CAACkB,cAAc,CAAC;UAC9DC,OAAO,EAAE,uBAAuB;UAChCC,SAAS,EAAE,aAAa;UACxBC,UAAU,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAK,GAAI,UAAU;UAC/CC,OAAO,EAAEH,MAAM,CAACC,QAAQ,CAACC,MAAK,GAAI,OAAO;UACzCE,aAAa,EAAE,uBAAuB;UACtCC,YAAY,EAAE,KAAK;UACnBC,mBAAmB,EAAE;QACvB,CAAC,CAAC;;QAEF;QACApB,OAAO,CAACqB,GAAG,CAAC,mBAAmB,EAAEZ,eAAe,CAAC;MACnD,EAAE,OAAOV,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD;MACF;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}