{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      name: '',\n      email: '',\n      identity: '',\n      password: '',\n      isSend: false,\n      verificationCode: '',\n      isVerified: false\n    };\n  },\n  methods: {\n    Send() {\n      axios.post('http://127.0.0.1:8000/mailSubmit', {\n        email: this.email\n      }).then(response => {\n        console.log(response.data); // This will log the verification code\n        this.isSend = true; // Show the verification code input field\n        this.verificationCode = ''; // Reset verification code field\n        this.isVerified = false; // Reset verified status\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    verifyCode() {\n      axios.post('http://127.0.0.1:8000/verifyCode', {\n        email: this.email,\n        verificationCode: this.verificationCode\n      }).then(response => {\n        if (response.data.success) {\n          this.isVerified = true; // Allow registration if verification is successful\n          alert(\"이메일 인증이 완료되었습니다.\");\n        } else {\n          alert(\"인증 코드가 잘못되었습니다.\");\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    register() {\n      if (!this.isVerified) {\n        alert(\"이메일 인증을 완료해 주세요.\");\n        return;\n      }\n      axios.post('http://127.0.0.1:8000/register', {\n        name: this.name,\n        email: this.email,\n        identity: this.identity,\n        password: this.password\n      }).then(response => {\n        console.log(response.data);\n        alert(\"회원가입이 성공적으로 이루어졌습니다.\\n로그인페이지로 이동합니다.\");\n        this.$router.push('/login');\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","name","email","identity","password","isSend","verificationCode","isVerified","methods","Send","post","then","response","console","log","catch","error","verifyCode","success","alert","register","$router","push"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/user/RegisterFrom.vue"],"sourcesContent":["<template>\n  <div class=\"w-full px-[30%] py-[50px]\" style=\"background-color:#FFFFF\">\n    <form @submit.prevent=\"register\">\n      <div class=\"flex w-full flex-col items-center justify-center\">\n        <img src=\"@/assets/sendgo/logo.svg\" class=\"w-[300px] h-auto mb-[80px]\">\n      </div>\n      <div class=\"flex flex-col mb-[30px] items-start gap-[20px]\">\n        <div class=\"font-semibold\">이름</div>\n        <input type=\"text\" v-model=\"name\" placeholder=\"홍길동\" class=\"text-[20px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n        <div class=\"font-semibold\">이메일</div>\n        <div class=\"flex flex-row w-full gap-[10px]\">\n          <input type=\"email\" v-model=\"email\" placeholder=\"abc123@gmail.com\" class=\"text-[20px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\" required>\n          <button @click=\"Send\" class=\"flex w-[60px] justify-center items-center rounded-[8px]\" style=\"background-color:#4F44F0; color:#FFFFFF\">전송</button>\n        </div>\n        <div v-if=\"isSend\">\n          <div class=\"flex flex-row w-full gap-[10px]\">\n            <input type=\"text\" v-model=\"verificationCode\" placeholder=\"인증번호\" class=\"text-[20px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n            <button @click=\"verifyCode\" class=\"flex w-[60px] justify-center items-center rounded-[8px]\" style=\"background-color:#4F44F0; color:#FFFFFF\">인증</button>\n          </div>\n        </div>\n        <div class=\"font-semibold\">아이디</div>\n        <input type=\"text\" v-model=\"identity\" placeholder=\"abcd123!@#\" class=\"text-[20px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n        <div class=\"font-semibold\">비밀번호</div>\n        <input type=\"password\" v-model=\"password\" placeholder=\"abc123!@#\" class=\"text-[20px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n      </div>\n      <div class=\"flex justify-center rounded-[8px] mb-[30px]\" style=\"background-color:#4F44F0;\">\n        <button @click='register' class=\"font-semibold px-[20px] py-[15px]\" style=\"color:#FFFFFF\" :disabled=\"!isVerified\">가입하기</button>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      name: '',\n      email: '',\n      identity: '',\n      password: '',\n      isSend: false,\n      verificationCode: '',\n      isVerified: false,\n    };\n  },\n  methods: {\n    Send() {\n      axios.post('http://127.0.0.1:8000/mailSubmit', {\n        email: this.email,\n      })\n      .then(response => {\n        console.log(response.data); // This will log the verification code\n        this.isSend = true; // Show the verification code input field\n        this.verificationCode = ''; // Reset verification code field\n        this.isVerified = false; // Reset verified status\n      })\n      .catch(error => {\n        console.error(error);\n      });\n    },\n    verifyCode() {\n      axios.post('http://127.0.0.1:8000/verifyCode', {\n        email: this.email,\n        verificationCode: this.verificationCode,\n      })\n      .then(response => {\n        if (response.data.success) {\n          this.isVerified = true; // Allow registration if verification is successful\n          alert(\"이메일 인증이 완료되었습니다.\");\n        } else {\n          alert(\"인증 코드가 잘못되었습니다.\");\n        }\n      })\n      .catch(error => {\n        console.error(error);\n      });\n    },\n    register() {\n      if (!this.isVerified) {\n        alert(\"이메일 인증을 완료해 주세요.\");\n        return;\n      }\n\n      axios.post('http://127.0.0.1:8000/register', {\n        name: this.name,\n        email: this.email,\n        identity: this.identity,\n        password: this.password,\n      })\n      .then(response => {\n        console.log(response.data);\n        alert(\"회원가입이 성공적으로 이루어졌습니다.\\n로그인페이지로 이동합니다.\");\n        this.$router.push('/login');\n      })\n      .catch(error => {\n        console.error(error);\n      });\n    }\n  }\n};\n</script>\n"],"mappings":";AAiCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,KAAK;MACbC,gBAAgB,EAAE,EAAE;MACpBC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,IAAIA,CAAA,EAAG;MACLV,KAAK,CAACW,IAAI,CAAC,kCAAkC,EAAE;QAC7CR,KAAK,EAAE,IAAI,CAACA;MACd,CAAC,EACAS,IAAI,CAACC,QAAO,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACZ,IAAI,CAAC,EAAE;QAC5B,IAAI,CAACK,MAAK,GAAI,IAAI,EAAE;QACpB,IAAI,CAACC,gBAAe,GAAI,EAAE,EAAE;QAC5B,IAAI,CAACC,UAAS,GAAI,KAAK,EAAE;MAC3B,CAAC,EACAQ,KAAK,CAACC,KAAI,IAAK;QACdH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC;IACDC,UAAUA,CAAA,EAAG;MACXlB,KAAK,CAACW,IAAI,CAAC,kCAAkC,EAAE;QAC7CR,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBI,gBAAgB,EAAE,IAAI,CAACA;MACzB,CAAC,EACAK,IAAI,CAACC,QAAO,IAAK;QAChB,IAAIA,QAAQ,CAACZ,IAAI,CAACkB,OAAO,EAAE;UACzB,IAAI,CAACX,UAAS,GAAI,IAAI,EAAE;UACxBY,KAAK,CAAC,kBAAkB,CAAC;QAC3B,OAAO;UACLA,KAAK,CAAC,iBAAiB,CAAC;QAC1B;MACF,CAAC,EACAJ,KAAK,CAACC,KAAI,IAAK;QACdH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC;IACDI,QAAQA,CAAA,EAAG;MACT,IAAI,CAAC,IAAI,CAACb,UAAU,EAAE;QACpBY,KAAK,CAAC,kBAAkB,CAAC;QACzB;MACF;MAEApB,KAAK,CAACW,IAAI,CAAC,gCAAgC,EAAE;QAC3CT,IAAI,EAAE,IAAI,CAACA,IAAI;QACfC,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBC,QAAQ,EAAE,IAAI,CAACA;MACjB,CAAC,EACAO,IAAI,CAACC,QAAO,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACZ,IAAI,CAAC;QAC1BmB,KAAK,CAAC,sCAAsC,CAAC;QAC7C,IAAI,CAACE,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;MAC7B,CAAC,EACAP,KAAK,CAACC,KAAI,IAAK;QACdH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;MACtB,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}