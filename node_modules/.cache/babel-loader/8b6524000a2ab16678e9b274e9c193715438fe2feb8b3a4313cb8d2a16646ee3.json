{"ast":null,"code":"import TossPayments from '@tosspayments/payment-sdk';\nexport default {\n  data() {\n    return {\n      couponApplied: false,\n      amount: 50000,\n      clientKey: 'test_gck_docs_Ovk5rk1EwkEbP0W43n07xlzm',\n      customerKey: '3blrC04giS82FlXAEiVeP',\n      tossPayments: null,\n      widgets: null\n    };\n  },\n  mounted() {\n    this.initializeTossPayments();\n  },\n  methods: {\n    async initializeTossPayments() {\n      try {\n        // Initialize Toss Payments SDK\n        this.tossPayments = new TossPayments({\n          clientKey: this.clientKey\n        });\n\n        // Configure widgets or other necessary setup\n        this.widgets = this.tossPayments.widgets({\n          customerKey: this.customerKey\n        });\n\n        // Set initial amount\n        await this.widgets.setAmount({\n          currency: 'KRW',\n          value: this.amount\n        });\n\n        // Render payment methods and agreements\n        await Promise.all([this.renderPaymentMethods(), this.renderAgreement()]);\n      } catch (error) {\n        console.error('Failed to initialize Toss Payments:', error);\n        // Handle initialization error\n      }\n    },\n    async renderPaymentMethods() {\n      // Render payment methods using this.widgets.renderPaymentMethods()\n      // Example: await this.widgets.renderPaymentMethods({ selector: this.$refs.paymentMethod, variantKey: 'DEFAULT' });\n    },\n    async renderAgreement() {\n      // Render agreement using this.widgets.renderAgreement()\n      // Example: await this.widgets.renderAgreement({ selector: this.$refs.agreement, variantKey: 'AGREEMENT' });\n    },\n    async applyCoupon() {\n      // Adjust amount and update UI based on coupon application\n    },\n    async processPayment() {\n      // Handle payment processing logic\n    }\n  }\n};","map":{"version":3,"names":["TossPayments","data","couponApplied","amount","clientKey","customerKey","tossPayments","widgets","mounted","initializeTossPayments","methods","setAmount","currency","value","Promise","all","renderPaymentMethods","renderAgreement","error","console","applyCoupon","processPayment"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/toss/TossCheck.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 할인 쿠폰 -->\n    <div>\n      <input type=\"checkbox\" id=\"coupon-box\" @change=\"applyCoupon\" />\n      <label for=\"coupon-box\"> 5,000원 쿠폰 적용 </label>\n    </div>\n    <!-- 결제 UI -->\n    <div ref=\"paymentMethod\"></div>\n    <!-- 이용약관 UI -->\n    <div ref=\"agreement\"></div>\n    <!-- 결제하기 버튼 -->\n    <button class=\"button\" @click=\"processPayment\" style=\"margin-top: 30px\">결제하기</button>\n  </div>\n</template>\n\n<script>\nimport TossPayments from '@tosspayments/payment-sdk';\n\nexport default {\n  data() {\n    return {\n      couponApplied: false,\n      amount: 50000,\n      clientKey: 'test_gck_docs_Ovk5rk1EwkEbP0W43n07xlzm',\n      customerKey: '3blrC04giS82FlXAEiVeP',\n      tossPayments: null,\n      widgets: null\n    };\n  },\n  mounted() {\n    this.initializeTossPayments();\n  },\n  methods: {\n    async initializeTossPayments() {\n      try {\n        // Initialize Toss Payments SDK\n        this.tossPayments = new TossPayments({ clientKey: this.clientKey });\n        \n        // Configure widgets or other necessary setup\n        this.widgets = this.tossPayments.widgets({ customerKey: this.customerKey });\n        \n        // Set initial amount\n        await this.widgets.setAmount({\n          currency: 'KRW',\n          value: this.amount\n        });\n\n        // Render payment methods and agreements\n        await Promise.all([\n          this.renderPaymentMethods(),\n          this.renderAgreement()\n        ]);\n      } catch (error) {\n        console.error('Failed to initialize Toss Payments:', error);\n        // Handle initialization error\n      }\n    },\n    async renderPaymentMethods() {\n      // Render payment methods using this.widgets.renderPaymentMethods()\n      // Example: await this.widgets.renderPaymentMethods({ selector: this.$refs.paymentMethod, variantKey: 'DEFAULT' });\n    },\n    async renderAgreement() {\n      // Render agreement using this.widgets.renderAgreement()\n      // Example: await this.widgets.renderAgreement({ selector: this.$refs.agreement, variantKey: 'AGREEMENT' });\n    },\n    async applyCoupon() {\n      // Adjust amount and update UI based on coupon application\n    },\n    async processPayment() {\n      // Handle payment processing logic\n    }\n  }\n};\n\n</script>\n\n<style>\n/* 필요한 스타일링 추가 */\n</style>\n"],"mappings":"AAiBA,OAAOA,YAAW,MAAO,2BAA2B;AAEpD,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,KAAK;MACpBC,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE,wCAAwC;MACnDC,WAAW,EAAE,uBAAuB;MACpCC,YAAY,EAAE,IAAI;MAClBC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,sBAAsB,CAAC,CAAC;EAC/B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,sBAAsBA,CAAA,EAAG;MAC7B,IAAI;QACF;QACA,IAAI,CAACH,YAAW,GAAI,IAAIN,YAAY,CAAC;UAAEI,SAAS,EAAE,IAAI,CAACA;QAAU,CAAC,CAAC;;QAEnE;QACA,IAAI,CAACG,OAAM,GAAI,IAAI,CAACD,YAAY,CAACC,OAAO,CAAC;UAAEF,WAAW,EAAE,IAAI,CAACA;QAAY,CAAC,CAAC;;QAE3E;QACA,MAAM,IAAI,CAACE,OAAO,CAACI,SAAS,CAAC;UAC3BC,QAAQ,EAAE,KAAK;UACfC,KAAK,EAAE,IAAI,CAACV;QACd,CAAC,CAAC;;QAEF;QACA,MAAMW,OAAO,CAACC,GAAG,CAAC,CAChB,IAAI,CAACC,oBAAoB,CAAC,CAAC,EAC3B,IAAI,CAACC,eAAe,CAAC,EACtB,CAAC;MACJ,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3D;MACF;IACF,CAAC;IACD,MAAMF,oBAAoBA,CAAA,EAAG;MAC3B;MACA;IAAA,CACD;IACD,MAAMC,eAAeA,CAAA,EAAG;MACtB;MACA;IAAA,CACD;IACD,MAAMG,WAAWA,CAAA,EAAG;MAClB;IAAA,CACD;IACD,MAAMC,cAAcA,CAAA,EAAG;MACrB;IAAA;EAEJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}