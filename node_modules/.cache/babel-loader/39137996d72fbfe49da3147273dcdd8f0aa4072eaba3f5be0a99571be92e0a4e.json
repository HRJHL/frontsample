{"ast":null,"code":"import axios from 'axios';\nimport { gapi } from 'gapi-script';\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: '',\n      name: '',\n      gapiClientId: 'YOUR_GOOGLE_CLIENT_ID'\n    };\n  },\n  mounted() {\n    this.initializeGoogleSignIn();\n  },\n  methods: {\n    login() {\n      axios.post('http://127.0.0.1:8000/login', {\n        identity: this.identity,\n        password: this.password,\n        name: this.name\n      }).then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a'; // 기본 프로필 이미지 설정\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n      }).catch(error => {\n        console.error(error);\n        alert(\"아이디 혹은 비밀번호가 틀렸습니다.\");\n      });\n    },\n    Sid() {\n      location.href = '/searchL';\n    },\n    Spw() {\n      location.href = '/searchP';\n    },\n    async loginWithGoogle() {\n      try {\n        const auth2 = gapi.auth2.getAuthInstance();\n        const googleUser = await auth2.signIn();\n        const id_token = googleUser.getAuthResponse().id_token;\n        const response = await axios.post('http://127.0.0.1:8000/auth/google', {\n          id_token: id_token\n        });\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n      } catch (error) {\n        console.error('Google login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    },\n    initializeGoogleSignIn() {\n      gapi.load('auth2', () => {\n        gapi.auth2.init({\n          client_id: this.gapiClientId\n        });\n      });\n    },\n    async handleKakaoLoginSuccess(authObj) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/auth/kakao', {\n          access_token: authObj.access_token\n        });\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n        console.log(response);\n      } catch (error) {\n        console.error('Kakao login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","gapi","data","identity","password","name","gapiClientId","mounted","initializeGoogleSignIn","methods","login","post","then","response","userName","user","useremail","email","userprofile","profile_image","sessionStorage","setItem","window","location","href","catch","error","console","alert","Sid","Spw","loginWithGoogle","auth2","getAuthInstance","googleUser","signIn","id_token","getAuthResponse","load","init","client_id","handleKakaoLoginSuccess","authObj","access_token","log"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/user/LoginFrom.vue"],"sourcesContent":["<template>\n  <div class=\"w-full px-[30%] py-[10%]\" style=\"background-color:#FFFFF\">\n    <form @submit.prevent=\"login\">\n      <div class=\"flex w-full flex-col items-center justify-center\">\n        <!-- 배너 이미지 -->\n        <img src=\"@/assets/sendgo/logo.svg\" class=\"w-[300px] lg:w-[250px] md:w-[200px] sm:w-[150px] h-auto mb-[80px] lg:mb-[60px] md:mb-[50px] sm:mb-[40px]\">\n      </div>\n      <div class=\"flex flex-col mb-[20px] sm:mb-[10px] items-start gap-[20px] sm:gap-[10px]\">\n        <!-- 로그인 폼 -->\n        <input type=\"text\" v-model=\"identity\" placeholder=\"아이디\" class=\"text-[20px] sm:text-[14px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n        <input type=\"password\" v-model=\"password\" placeholder=\"비밀번호\" class=\"text-[20px] sm:text-[14px] w-full pl-[10px] py-[5px] rounded-[8px]\" style=\"border: 1px solid #CECECE;\">\n      </div>\n      <!-- 아이디 비번 찾기 -->\n      <div class=\"flex flex-row justify-end gap-[10px] mb-[20px]\">\n        <div @click=\"Sid()\" class=\"text-[15px]\">아이디 찾기</div>\n        <div class=\"text-[15px]\">|</div>\n        <div @click=\"Spw()\" class=\"text-[15px]\">비밀번호 찾기</div>\n      </div>\n      <div class=\"flex justify-center rounded-[8px] mb-[30px] sm:mb-[20px]\" style=\"background-color:#4F44F0;\">\n        <button type=\"submit\" class=\"font-semibold px-[20px] py-[15px] sm:text-[14px] sm:py-[10px]\" style=\"color:#FFFFFF\">로그인</button>\n      </div>\n      <div class=\"flex justify-start rounded-[8px] mb-[30px] sm:mb-[20px]\">\n        <div id=\"kakao-login-button\"></div>\n      </div>\n      <div class=\"flex justify-center rounded-[8px] mb-[30px] sm:mb-[20px]\">\n        <button @click=\"loginWithGoogle\" class=\"font-semibold px-[20px] py-[15px] sm:text-[14px] sm:py-[10px]\" style=\"background-color:#DB4437; color:#FFFFFF;\">Google 로그인</button>\n      </div>\n      <div class=\"flex justify-center sm:text-[10px]\">\n        계정이 없으신가요?&nbsp;<router-link to=\"/register\" class=\"font-semibold border-b\" style=\"color:#4F44F0; border-color:#4F44F0;\">회원가입하기</router-link>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { gapi } from 'gapi-script';\n\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: '',\n      name: '',\n      gapiClientId: 'YOUR_GOOGLE_CLIENT_ID',\n    };\n  },\n  mounted() {\n    this.initializeGoogleSignIn();\n  },\n  methods: {\n    login() {\n      axios.post('http://127.0.0.1:8000/login', {\n        identity: this.identity,\n        password: this.password,\n        name: this.name,\n      })\n      .then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a'; // 기본 프로필 이미지 설정\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n      })\n      .catch(error => {\n        console.error(error);\n        alert(\"아이디 혹은 비밀번호가 틀렸습니다.\");\n      });\n    },\n    Sid() {\n      location.href='/searchL';\n    },\n    Spw() {\n      location.href='/searchP';\n    },\n    async loginWithGoogle() {\n      try {\n        const auth2 = gapi.auth2.getAuthInstance();\n        const googleUser = await auth2.signIn();\n        const id_token = googleUser.getAuthResponse().id_token;\n\n        const response = await axios.post('http://127.0.0.1:8000/auth/google', {\n          id_token: id_token\n        });\n\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n      } catch (error) {\n        console.error('Google login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    },\n    initializeGoogleSignIn() {\n      gapi.load('auth2', () => {\n        gapi.auth2.init({ client_id: this.gapiClientId });\n      });\n    },\n    async handleKakaoLoginSuccess(authObj) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/auth/kakao', {\n          access_token: authObj.access_token\n        });\n\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        let userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href ='/message';\n        console.log(response);\n      } catch (error) {\n        console.error('Kakao login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 스타일 추가 */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}