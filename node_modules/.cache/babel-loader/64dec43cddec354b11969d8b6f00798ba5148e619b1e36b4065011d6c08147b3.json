{"ast":null,"code":"import PaymentWidget from '@tosspayments/payment-sdk';\nexport default {\n  data() {\n    return {\n      couponApplied: false,\n      amount: 50000,\n      paymentWidget: null,\n      paymentMethodWidget: null\n    };\n  },\n  mounted() {\n    const widgetClientKey = \"test_gck_docs_Ovk5rk1EwkEbP0W43n07xlzm\";\n    const customerKey = \"1rNzb3iHa8gPgRkLABTcJ\";\n    const paymentWidget = new PaymentWidget(widgetClientKey, customerKey);\n    // Use paymentWidget to render payment methods, agreements, etc.\n  },\n  methods: {\n    renderPaymentMethods() {\n      this.paymentMethodWidget = this.paymentWidget.renderPaymentMethods(this.$refs.paymentMethod, {\n        value: this.amount\n      }, {\n        variantKey: \"DEFAULT\"\n      });\n    },\n    renderAgreement() {\n      this.paymentWidget.renderAgreement(this.$refs.agreement, {\n        variantKey: \"AGREEMENT\"\n      });\n    },\n    applyCoupon() {\n      if (this.couponApplied) {\n        this.paymentMethodWidget.updateAmount(this.amount);\n      } else {\n        this.paymentMethodWidget.updateAmount(this.amount - 5000);\n      }\n      this.couponApplied = !this.couponApplied;\n    },\n    processPayment() {\n      // 결제를 요청하기 전에 orderId, amount를 서버에 저장하는 것을 고려해야 합니다.\n      // 예시로 주어진 값들은 실제 서버에서 처리할 수 있는 형태로 변경해야 합니다.\n      this.paymentWidget.requestPayment({\n        orderId: \"zSpkmBCED-aslEKg0n72-\",\n        orderName: \"토스 티셔츠 외 2건\",\n        successUrl: window.location.origin + \"/success\",\n        failUrl: window.location.origin + \"/fail\",\n        customerEmail: \"customer123@gmail.com\",\n        customerName: \"김토스\",\n        customerMobilePhone: \"01012341234\"\n      });\n    }\n  }\n};","map":{"version":3,"names":["PaymentWidget","data","couponApplied","amount","paymentWidget","paymentMethodWidget","mounted","widgetClientKey","customerKey","methods","renderPaymentMethods","$refs","paymentMethod","value","variantKey","renderAgreement","agreement","applyCoupon","updateAmount","processPayment","requestPayment","orderId","orderName","successUrl","window","location","origin","failUrl","customerEmail","customerName","customerMobilePhone"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/toss/TossCheck.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <input type=\"checkbox\" id=\"coupon-box\" @change=\"applyCoupon\" />\n      <label for=\"coupon-box\"> 5,000원 쿠폰 적용 </label>\n    </div>\n    <!-- 결제 UI, 이용약관 UI 영역 -->\n    <div ref=\"paymentMethod\"></div>\n    <div ref=\"agreement\"></div>\n    <!-- 결제하기 버튼 -->\n    <button @click=\"processPayment\">결제하기</button>\n  </div>\n</template>\n\n<script>\nimport PaymentWidget from '@tosspayments/payment-sdk'\n\nexport default {\n  data() {\n    return {\n      couponApplied: false,\n      amount: 50000,\n      paymentWidget: null,\n      paymentMethodWidget: null\n    };\n  },\n  mounted() {\n    const widgetClientKey = \"test_gck_docs_Ovk5rk1EwkEbP0W43n07xlzm\";\n    const customerKey = \"1rNzb3iHa8gPgRkLABTcJ\";\n    \n    const paymentWidget = new PaymentWidget(widgetClientKey, customerKey);\n    // Use paymentWidget to render payment methods, agreements, etc.\n  },\n  methods: {\n    renderPaymentMethods() {\n      this.paymentMethodWidget = this.paymentWidget.renderPaymentMethods(\n        this.$refs.paymentMethod,\n        { value: this.amount },\n        { variantKey: \"DEFAULT\" }\n      );\n    },\n    renderAgreement() {\n      this.paymentWidget.renderAgreement(this.$refs.agreement, { variantKey: \"AGREEMENT\" });\n    },\n    applyCoupon() {\n      if (this.couponApplied) {\n        this.paymentMethodWidget.updateAmount(this.amount);\n      } else {\n        this.paymentMethodWidget.updateAmount(this.amount - 5000);\n      }\n      this.couponApplied = !this.couponApplied;\n    },\n    processPayment() {\n      // 결제를 요청하기 전에 orderId, amount를 서버에 저장하는 것을 고려해야 합니다.\n      // 예시로 주어진 값들은 실제 서버에서 처리할 수 있는 형태로 변경해야 합니다.\n      this.paymentWidget.requestPayment({\n        orderId: \"zSpkmBCED-aslEKg0n72-\",\n        orderName: \"토스 티셔츠 외 2건\",\n        successUrl: window.location.origin + \"/success\",\n        failUrl: window.location.origin + \"/fail\",\n        customerEmail: \"customer123@gmail.com\",\n        customerName: \"김토스\",\n        customerMobilePhone: \"01012341234\"\n      });\n    }\n  }\n};\n</script>\n"],"mappings":"AAeA,OAAOA,aAAY,MAAO,2BAA0B;AAEpD,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,KAAK;MACpBC,MAAM,EAAE,KAAK;MACbC,aAAa,EAAE,IAAI;MACnBC,mBAAmB,EAAE;IACvB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,MAAMC,eAAc,GAAI,wCAAwC;IAChE,MAAMC,WAAU,GAAI,uBAAuB;IAE3C,MAAMJ,aAAY,GAAI,IAAIJ,aAAa,CAACO,eAAe,EAAEC,WAAW,CAAC;IACrE;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,oBAAoBA,CAAA,EAAG;MACrB,IAAI,CAACL,mBAAkB,GAAI,IAAI,CAACD,aAAa,CAACM,oBAAoB,CAChE,IAAI,CAACC,KAAK,CAACC,aAAa,EACxB;QAAEC,KAAK,EAAE,IAAI,CAACV;MAAO,CAAC,EACtB;QAAEW,UAAU,EAAE;MAAU,CAC1B,CAAC;IACH,CAAC;IACDC,eAAeA,CAAA,EAAG;MAChB,IAAI,CAACX,aAAa,CAACW,eAAe,CAAC,IAAI,CAACJ,KAAK,CAACK,SAAS,EAAE;QAAEF,UAAU,EAAE;MAAY,CAAC,CAAC;IACvF,CAAC;IACDG,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACf,aAAa,EAAE;QACtB,IAAI,CAACG,mBAAmB,CAACa,YAAY,CAAC,IAAI,CAACf,MAAM,CAAC;MACpD,OAAO;QACL,IAAI,CAACE,mBAAmB,CAACa,YAAY,CAAC,IAAI,CAACf,MAAK,GAAI,IAAI,CAAC;MAC3D;MACA,IAAI,CAACD,aAAY,GAAI,CAAC,IAAI,CAACA,aAAa;IAC1C,CAAC;IACDiB,cAAcA,CAAA,EAAG;MACf;MACA;MACA,IAAI,CAACf,aAAa,CAACgB,cAAc,CAAC;QAChCC,OAAO,EAAE,uBAAuB;QAChCC,SAAS,EAAE,aAAa;QACxBC,UAAU,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAK,GAAI,UAAU;QAC/CC,OAAO,EAAEH,MAAM,CAACC,QAAQ,CAACC,MAAK,GAAI,OAAO;QACzCE,aAAa,EAAE,uBAAuB;QACtCC,YAAY,EAAE,KAAK;QACnBC,mBAAmB,EAAE;MACvB,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}