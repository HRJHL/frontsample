{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"가입하기\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0,\n  class: \"text-green-500 mt-4\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"text-red-500 mt-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", {\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.register && $options.register(...args), [\"prevent\"])),\n    class: \"flex flex-col py-[20%] items-center gap-[10px]\"\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.name = $event),\n    placeholder: \"이름\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.name]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.email = $event),\n    placeholder: \"이메일\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.email]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.password = $event),\n    placeholder: \"비밀번호\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.password_confirmation = $event),\n    placeholder: \"비밀번호 확인\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password_confirmation]]), _hoisted_1, _createCommentVNode(\" 추가: 회원가입 성공 메시지 \"), $data.registrationSuccess ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _toDisplayString($data.registrationMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 추가: 회원가입 오류 메시지 \"), $data.registrationError ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _toDisplayString($data.registrationError), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 32 /* NEED_HYDRATION */);\n}","map":{"version":3,"names":["_createElementVNode","type","key","class","_createElementBlock","onSubmit","_cache","_withModifiers","args","$options","register","$event","$data","name","placeholder","required","email","password","password_confirmation","_hoisted_1","_createCommentVNode","registrationSuccess","_hoisted_2","_toDisplayString","registrationMessage","registrationError","_hoisted_3"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/user/RegisterFrom.vue"],"sourcesContent":["<template>\n  <form @submit.prevent=\"register\" class=\"flex flex-col py-[20%] items-center gap-[10px]\">\n    <input type=\"text\" v-model=\"name\" placeholder=\"이름\" required>\n    <input type=\"email\" v-model=\"email\" placeholder=\"이메일\" required>\n    <input type=\"password\" v-model=\"password\" placeholder=\"비밀번호\" required>\n    <input type=\"password\" v-model=\"password_confirmation\" placeholder=\"비밀번호 확인\" required>\n    <button type=\"submit\">가입하기</button>\n    \n    <!-- 추가: 회원가입 성공 메시지 -->\n    <div v-if=\"registrationSuccess\" class=\"text-green-500 mt-4\">\n      {{ registrationMessage }}\n    </div>\n    \n    <!-- 추가: 회원가입 오류 메시지 -->\n    <div v-if=\"registrationError\" class=\"text-red-500 mt-4\">\n      {{ registrationError }}\n    </div>\n  </form>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      name: '',\n      email: '',\n      password: '',\n      password_confirmation: '',\n      registrationSuccess: false,\n      registrationError: '',\n      registrationMessage: '',\n    };\n  },\n  methods: {\n    register() {\n      axios.post('http://127.0.0.1:8000/register', {\n        name: this.name,\n        email: this.email,\n        password: this.password,\n        password_confirmation: this.password_confirmation,\n      })\n      .then(response => {\n    console.log(response); // 응답 전체를 콘솔에 출력하여 확인\n    console.log(response.data); // 데이터에 접근하기 전에 확인\n    // 성공 처리\n})\n.catch(error => {\n    console.error(error);\n    // 오류 처리\n});\n    }\n  }\n};\n</script>\n"],"mappings":";gCAMIA,mBAAA,CAAmC;EAA3BC,IAAI,EAAC;AAAQ,GAAC,MAAI;;EAN9BC,GAAA;EASoCC,KAAK,EAAC;;;EAT1CD,GAAA;EAckCC,KAAK,EAAC;;;uBAbtCC,mBAAA,CAgBO;IAhBAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MADfC,cAAA,KAAAC,IAAA,KACyBC,QAAA,CAAAC,QAAA,IAAAD,QAAA,CAAAC,QAAA,IAAAF,IAAA,CAAQ;IAAEL,KAAK,EAAC;sBACrCH,mBAAA,CAA4D;IAArDC,IAAI,EAAC,MAAM;IAFtB,uBAAAK,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAEgCC,KAAA,CAAAC,IAAI,GAAAF,MAAA;IAAEG,WAAW,EAAC,IAAI;IAACC,QAAQ,EAAR;iDAAvBH,KAAA,CAAAC,IAAI,E,mBAChCb,mBAAA,CAA+D;IAAxDC,IAAI,EAAC,OAAO;IAHvB,uBAAAK,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAGiCC,KAAA,CAAAI,KAAK,GAAAL,MAAA;IAAEG,WAAW,EAAC,KAAK;IAACC,QAAQ,EAAR;iDAAzBH,KAAA,CAAAI,KAAK,E,mBAClChB,mBAAA,CAAsE;IAA/DC,IAAI,EAAC,UAAU;IAJ1B,uBAAAK,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAIoCC,KAAA,CAAAK,QAAQ,GAAAN,MAAA;IAAEG,WAAW,EAAC,MAAM;IAACC,QAAQ,EAAR;iDAA7BH,KAAA,CAAAK,QAAQ,E,mBACxCjB,mBAAA,CAAsF;IAA/EC,IAAI,EAAC,UAAU;IAL1B,uBAAAK,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAKoCC,KAAA,CAAAM,qBAAqB,GAAAP,MAAA;IAAEG,WAAW,EAAC,SAAS;IAACC,QAAQ,EAAR;iDAA7CH,KAAA,CAAAM,qBAAqB,E,GACrDC,UAAmC,EAEnCC,mBAAA,qBAAwB,EACbR,KAAA,CAAAS,mBAAmB,I,cAA9BjB,mBAAA,CAEM,OAFNkB,UAEM,EAAAC,gBAAA,CADDX,KAAA,CAAAY,mBAAmB,oBAV5BJ,mBAAA,gBAaIA,mBAAA,qBAAwB,EACbR,KAAA,CAAAa,iBAAiB,I,cAA5BrB,mBAAA,CAEM,OAFNsB,UAEM,EAAAH,gBAAA,CADDX,KAAA,CAAAa,iBAAiB,oBAf1BL,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}