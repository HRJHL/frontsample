{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: ''\n    };\n  },\n  mounted() {\n    this.loadGoogleApi();\n  },\n  methods: {\n    loadGoogleApi() {\n      if (window.gapi) {\n        this.initGoogleLogin();\n      } else {\n        const script = document.createElement('script');\n        script.src = 'https://apis.google.com/js/platform.js';\n        script.async = true;\n        script.defer = true;\n        script.onload = () => {\n          this.initGoogleLogin();\n        };\n        document.head.appendChild(script);\n      }\n    },\n    initGoogleLogin() {\n      window.gapi.load('auth2', () => {\n        window.gapi.auth2.init({\n          client_id: 'YOUR_CLIENT_ID'\n        }).then(() => {\n          window.gapi.signin2.render('google-login-button', {\n            scope: 'profile email',\n            width: 240,\n            height: 50,\n            longtitle: true,\n            theme: 'dark',\n            onsuccess: this.handleGoogleLoginSuccess,\n            onfailure: error => console.error('Google login error:', error)\n          });\n        });\n      });\n    },\n    handleGoogleLoginSuccess(googleUser) {\n      const id_token = googleUser.getAuthResponse().id_token;\n      axios.post('http://127.0.0.1:8000/auth/google', {\n        id_token\n      }).then(response => {\n        const userName = response.data.user.name;\n        const useremail = response.data.user.email;\n        const userprofile = response.data.user.profile_image || 'a';\n        sessionStorage.setItem(\"logg\", true);\n        sessionStorage.setItem('name', userName);\n        sessionStorage.setItem('email', useremail);\n        sessionStorage.setItem('profile', userprofile);\n        window.location.href = '/message';\n      }).catch(error => {\n        console.error('Google login error:', error);\n        alert(\"로그인에 실패했습니다.\");\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","identity","password","mounted","loadGoogleApi","methods","window","gapi","initGoogleLogin","script","document","createElement","src","async","defer","onload","head","appendChild","load","auth2","init","client_id","then","signin2","render","scope","width","height","longtitle","theme","onsuccess","handleGoogleLoginSuccess","onfailure","error","console","googleUser","id_token","getAuthResponse","post","response","userName","user","name","useremail","email","userprofile","profile_image","sessionStorage","setItem","location","href","catch","alert"],"sources":["/Users/dong-eui/Desktop/sample/sendgo/src/views/user/LoginFrom.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <form @submit.prevent=\"login\">\n      <!-- 로그인 폼 내용 -->\n      <input type=\"text\" v-model=\"identity\" placeholder=\"아이디\">\n      <input type=\"password\" v-model=\"password\" placeholder=\"비밀번호\">\n      <button type=\"submit\">로그인</button>\n    </form>\n    <div id=\"google-login-button\"></div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      identity: '',\n      password: '',\n    };\n  },\n  mounted() {\n    this.loadGoogleApi();\n  },\n  methods: {\n    loadGoogleApi() {\n      if (window.gapi) {\n        this.initGoogleLogin();\n      } else {\n        const script = document.createElement('script');\n        script.src = 'https://apis.google.com/js/platform.js';\n        script.async = true;\n        script.defer = true;\n        script.onload = () => {\n          this.initGoogleLogin();\n        };\n        document.head.appendChild(script);\n      }\n    },\n    initGoogleLogin() {\n      window.gapi.load('auth2', () => {\n        window.gapi.auth2.init({\n          client_id: 'YOUR_CLIENT_ID',\n        }).then(() => {\n          window.gapi.signin2.render('google-login-button', {\n            scope: 'profile email',\n            width: 240,\n            height: 50,\n            longtitle: true,\n            theme: 'dark',\n            onsuccess: this.handleGoogleLoginSuccess,\n            onfailure: (error) => console.error('Google login error:', error),\n          });\n        });\n      });\n    },\n    handleGoogleLoginSuccess(googleUser) {\n      const id_token = googleUser.getAuthResponse().id_token;\n\n      axios.post('http://127.0.0.1:8000/auth/google', { id_token })\n        .then(response => {\n          const userName = response.data.user.name;\n          const useremail = response.data.user.email;\n          const userprofile = response.data.user.profile_image || 'a';\n          sessionStorage.setItem(\"logg\", true);\n          sessionStorage.setItem('name', userName);\n          sessionStorage.setItem('email', useremail);\n          sessionStorage.setItem('profile', userprofile);\n          window.location.href = '/message';\n        })\n        .catch(error => {\n          console.error('Google login error:', error);\n          alert(\"로그인에 실패했습니다.\");\n        });\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 스타일 추가 */\n</style>\n"],"mappings":"AAaA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE;IACPD,aAAaA,CAAA,EAAG;MACd,IAAIE,MAAM,CAACC,IAAI,EAAE;QACf,IAAI,CAACC,eAAe,CAAC,CAAC;MACxB,OAAO;QACL,MAAMC,MAAK,GAAIC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;QAC/CF,MAAM,CAACG,GAAE,GAAI,wCAAwC;QACrDH,MAAM,CAACI,KAAI,GAAI,IAAI;QACnBJ,MAAM,CAACK,KAAI,GAAI,IAAI;QACnBL,MAAM,CAACM,MAAK,GAAI,MAAM;UACpB,IAAI,CAACP,eAAe,CAAC,CAAC;QACxB,CAAC;QACDE,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,MAAM,CAAC;MACnC;IACF,CAAC;IACDD,eAAeA,CAAA,EAAG;MAChBF,MAAM,CAACC,IAAI,CAACW,IAAI,CAAC,OAAO,EAAE,MAAM;QAC9BZ,MAAM,CAACC,IAAI,CAACY,KAAK,CAACC,IAAI,CAAC;UACrBC,SAAS,EAAE;QACb,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;UACZhB,MAAM,CAACC,IAAI,CAACgB,OAAO,CAACC,MAAM,CAAC,qBAAqB,EAAE;YAChDC,KAAK,EAAE,eAAe;YACtBC,KAAK,EAAE,GAAG;YACVC,MAAM,EAAE,EAAE;YACVC,SAAS,EAAE,IAAI;YACfC,KAAK,EAAE,MAAM;YACbC,SAAS,EAAE,IAAI,CAACC,wBAAwB;YACxCC,SAAS,EAAGC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK;UAClE,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDF,wBAAwBA,CAACI,UAAU,EAAE;MACnC,MAAMC,QAAO,GAAID,UAAU,CAACE,eAAe,CAAC,CAAC,CAACD,QAAQ;MAEtDrC,KAAK,CAACuC,IAAI,CAAC,mCAAmC,EAAE;QAAEF;MAAS,CAAC,EACzDd,IAAI,CAACiB,QAAO,IAAK;QAChB,MAAMC,QAAO,GAAID,QAAQ,CAACvC,IAAI,CAACyC,IAAI,CAACC,IAAI;QACxC,MAAMC,SAAQ,GAAIJ,QAAQ,CAACvC,IAAI,CAACyC,IAAI,CAACG,KAAK;QAC1C,MAAMC,WAAU,GAAIN,QAAQ,CAACvC,IAAI,CAACyC,IAAI,CAACK,aAAY,IAAK,GAAG;QAC3DC,cAAc,CAACC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;QACpCD,cAAc,CAACC,OAAO,CAAC,MAAM,EAAER,QAAQ,CAAC;QACxCO,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEL,SAAS,CAAC;QAC1CI,cAAc,CAACC,OAAO,CAAC,SAAS,EAAEH,WAAW,CAAC;QAC9CvC,MAAM,CAAC2C,QAAQ,CAACC,IAAG,GAAI,UAAU;MACnC,CAAC,EACAC,KAAK,CAAClB,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3CmB,KAAK,CAAC,cAAc,CAAC;MACvB,CAAC,CAAC;IACN;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}